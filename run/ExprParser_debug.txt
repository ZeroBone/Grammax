Grammar:
 e -> <0> e(expr) PLUS t(term)    {  v = expr + term;  }
    | <1> t(term)    {  v = term;  };
Se' -> <6> e;
 t -> <2> t(term) MUL f(factor)    {  v = term * factor;  }
    | <3> f(factor)    {  v = factor;  };
 f -> <4> LPAREN e(expr) RPAREN    {  v = expr;  }
    | <5> NUM(n)    {  v = n;  };

First sets:
FIRST(e) = {LPAREN, NUM}
FIRST(e') = {LPAREN, NUM}
FIRST(t) = {LPAREN, NUM}
FIRST(f) = {LPAREN, NUM}

Follow sets:
FOLLOW(e) = {PLUS, RPAREN, EOF}
FOLLOW(e') = {EOF}
FOLLOW(t) = {MUL, PLUS, RPAREN, EOF}
FOLLOW(f) = {MUL, PLUS, RPAREN, EOF}

Automation:
Non-terminal count: 3
Terminal count: 6
State count: 12 (0 - 11)

Action table:
STATE |    MUL |    NUM | LPAREN | RPAREN |   PLUS |    EOF
   0  | ------ |     s5 |     s1 | ------ | ------ | ------
   1  | ------ |     s5 |     s1 | ------ | ------ | ------
   2  | ------ | ------ | ------ | ------ |     s7 | accept
   3  |     s8 | ------ | ------ |     r1 |     r1 |     r1
   4  |     r3 | ------ | ------ |     r3 |     r3 |     r3
   5  |     r5 | ------ | ------ |     r5 |     r5 |     r5
   6  | ------ | ------ | ------ |     s9 |     s7 | ------
   7  | ------ |     s5 |     s1 | ------ | ------ | ------
   8  | ------ |     s5 |     s1 | ------ | ------ | ------
   9  |     r4 | ------ | ------ |     r4 |     r4 |     r4
  10  |     s8 | ------ | ------ |     r0 |     r0 |     r0
  11  |     r2 | ------ | ------ |     r2 |     r2 |     r2


Goto table:
STATE |     t |     e |     f
   0  |     3 |     2 |     4
   1  |     3 |     6 |     4
   2  | ----- | ----- | -----
   3  | ----- | ----- | -----
   4  | ----- | ----- | -----
   5  | ----- | ----- | -----
   6  | ----- | ----- | -----
   7  |    10 | ----- |     4
   8  | ----- | ----- |    11
   9  | ----- | ----- | -----
  10  | ----- | ----- | -----
  11  | ----- | ----- | -----


State 0:
    e' -> * e

State 1:
    f -> LPAREN * e RPAREN

State 2:
    e -> e * PLUS t
    e' -> e *

State 3:
    t -> t * MUL f
    e -> t *

State 4:
    t -> f *

State 5:
    f -> NUM *

State 6:
    e -> e * PLUS t
    f -> LPAREN e * RPAREN

State 7:
    e -> e PLUS * t

State 8:
    t -> t MUL * f

State 9:
    f -> LPAREN e RPAREN *

State 10:
    t -> t * MUL f
    e -> e PLUS t *

State 11:
    t -> t MUL f *
