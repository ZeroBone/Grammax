/* This file was generated by Grammax v1.1.0 */

#ifndef GRAMMAX_PARSER_ZEROLAMPPARSER_H
#define GRAMMAX_PARSER_ZEROLAMPPARSER_H

// test

class ZeroLampParser {
private:
#define T_RIGHT_PARENTHESIS 0
#define T_LESS_THAN_OR_EQUALS 1
#define T_BITWISE_OR 2
#define T_STRING_V 3
#define T_FLOAT_V 4
#define T_MINUS 5
#define T_BITWISE_SHIFT_RIGHT 6
#define T_BITWISE_INVERT 7
#define T_QUESTION_MARK 8
#define T_SEMICOLON 9
#define T_GREATER_THAN 10
#define T_LEFT_BRACE 11
#define T_ASSIGN_BITWISE_SHIFT_RIGHT 12
#define T_ID 13
#define T_IF 14
#define T_ASSIGN_REMAINDER 15
#define T_LEFT_BRACKET 16
#define T_DOT 17
#define T_TRUE 18
#define T_ASSIGN_MINUS 19
#define T_BITWISE_AND 20
#define T_LESS_THAN 21
#define T_BITWISE_XOR 22
#define T_LEFT_PARENTHESIS 23
#define T_AND 24
#define T_POW 25
#define T_MULTIPLY 26
#define T_PLUS 27
#define T_ASSIGN_BITWISE_AND 28
#define T_ASSIGN_BITWISE_XOR 29
#define T_FN 30
#define T_ASSIGN 31
#define T_INT_V 32
#define T_DIVIDE 33
#define T_BITWISE_SHIFT_LEFT 34
#define T_ASSIGN_BITWISE_SHIFT_LEFT 35
#define T_INVERT 36
#define T_ASSIGN_BITWISE_OR 37
#define T_ON 38
#define T_COMMA 39
#define T_RIGHT_BRACE 40
#define T_OR 41
#define T_EQUALS 42
#define T_NOT_EQUALS 43
#define T_ASSIGN_MULTIPLY 44
#define T_COLON 45
#define T_RIGHT_BRACKET 46
#define T_ASSIGN_PLUS 47
#define T_REMAINDER 48
#define T_ASSIGN_DIVIDE 49
#define T_FALSE 50
#define T_GREATER_THAN_OR_EQUALS 51
#define T_EOF 52
#define TERMINAL_COUNT 53
#define NON_TERMINAL_COUNT 21
    static constexpr int gotoTable[] = {
        0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,3,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        20,16,0,31,30,26,33,32,18,37,28,43,41,0,21,0,17,34,24,27,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,
        20,16,0,31,47,26,33,32,18,37,28,43,41,0,21,0,17,34,24,27,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,
        0,0,50,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        20,55,0,31,0,26,33,32,18,37,28,43,41,0,21,0,17,34,24,27,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,26,33,0,0,60,0,0,0,0,0,0,0,34,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,26,33,0,0,78,0,0,0,0,0,0,0,34,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,26,33,0,0,90,0,0,0,0,0,0,0,34,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,26,33,0,0,100,0,0,0,0,0,0,0,34,0,101,0,
        0,0,0,0,0,26,33,0,0,100,0,0,0,0,0,0,0,34,0,102,0,
        20,0,0,31,0,26,33,32,0,100,0,0,0,0,21,0,17,34,103,27,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,26,33,105,0,100,0,0,0,0,21,0,17,34,0,27,0,
        0,0,0,0,0,26,33,106,0,100,0,0,0,0,21,0,17,34,0,27,0,
        0,0,0,0,0,26,33,0,0,100,0,0,0,0,0,0,107,34,0,27,0,
        0,0,0,0,0,26,33,0,0,100,0,0,0,0,0,0,108,34,0,27,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        20,0,0,109,0,26,33,32,0,100,0,0,0,0,21,0,17,34,0,27,0,
        20,110,0,31,0,26,33,32,18,37,28,43,41,0,21,0,17,34,24,27,0,
        20,16,0,31,112,26,33,32,18,37,28,43,41,0,21,0,17,34,24,27,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,26,33,0,0,0,0,0,0,0,0,0,0,114,0,0,0,
        0,0,0,0,0,26,33,0,0,115,0,0,0,0,0,0,0,34,0,0,0,
        0,0,0,0,0,26,33,0,0,116,0,0,0,0,0,0,0,34,0,0,0,
        0,0,0,0,0,26,33,0,0,117,0,0,0,0,0,0,0,34,0,0,0,
        20,118,0,31,0,26,33,32,18,37,28,43,41,0,21,0,17,34,24,27,0,
        20,0,0,31,0,26,33,32,18,100,0,0,119,0,21,0,17,34,24,27,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        20,120,0,31,0,26,33,32,18,37,28,43,41,0,21,0,17,34,24,27,0,
        121,0,0,0,0,26,33,32,0,100,0,0,0,0,21,0,17,34,0,27,0,
        0,0,0,0,0,26,33,0,0,100,0,0,0,0,122,0,17,34,0,27,0,
        0,0,0,0,0,26,33,0,0,100,0,0,0,0,123,0,17,34,0,27,0,
        0,0,0,0,0,26,33,0,0,100,0,0,0,0,124,0,17,34,0,27,0,
        0,0,0,0,0,26,33,0,0,100,0,0,0,0,125,0,17,34,0,27,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        20,126,0,31,0,26,33,32,18,37,28,43,41,0,21,0,17,34,24,27,0,
        20,127,0,31,0,26,33,32,18,37,28,43,41,0,21,0,17,34,24,27,0,
        20,128,0,31,0,26,33,32,18,37,28,43,41,0,21,0,17,34,24,27,0,
        20,129,0,31,0,26,33,32,18,37,28,43,41,0,21,0,17,34,24,27,0,
        20,130,0,31,0,26,33,32,18,37,28,43,41,0,21,0,17,34,24,27,0,
        20,131,0,31,0,26,33,32,18,37,28,43,41,0,21,0,17,34,24,27,0,
        20,132,0,31,0,26,33,32,18,37,28,43,41,0,21,0,17,34,24,27,0,
        20,133,0,31,0,26,33,32,18,37,28,43,41,0,21,0,17,34,24,27,0,
        20,134,0,31,0,26,33,32,18,37,28,43,41,0,21,0,17,34,24,27,0,
        20,135,0,31,0,26,33,32,18,37,28,43,41,0,21,0,17,34,24,27,0,
        20,136,0,31,0,26,33,32,18,37,28,43,41,0,21,0,17,34,24,27,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        20,0,0,31,0,26,33,32,137,100,0,0,0,0,21,0,17,34,24,27,0,
        20,138,0,31,0,26,33,32,18,37,28,43,41,0,21,0,17,34,24,27,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,139,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,141,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,148,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,150,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        20,0,0,31,0,26,33,32,18,100,28,151,41,0,21,0,17,34,24,27,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    static constexpr int actionTable[] = {
        0,0,0,0,0,0,0,0,0,0,0,0,0,-7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-7,0,0,0,0,0,0,0,-7,0,-7,0,0,0,0,0,0,0,0,0,0,0,-7,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,
        0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,-2,
        0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,-8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-8,0,0,0,0,0,0,0,-8,0,-8,0,0,0,0,0,0,0,0,0,0,0,-8,
        0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        25,0,0,40,29,22,0,36,0,0,0,0,0,42,0,0,0,0,38,0,0,0,0,19,0,0,0,0,0,0,0,0,23,0,0,0,39,0,0,0,0,0,0,0,0,0,0,0,0,0,35,0,0,
        0,0,0,0,0,0,0,0,0,44,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,-7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-7,0,0,0,0,0,0,0,-7,0,-7,0,0,0,0,0,0,0,0,0,0,0,-7,
        46,0,0,40,29,22,0,36,0,0,0,0,0,42,0,0,0,0,38,0,0,0,0,19,0,0,0,0,0,0,0,0,23,0,0,0,39,0,0,0,0,0,0,0,0,0,0,0,0,0,35,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,-7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-7,0,0,0,0,0,0,0,-7,0,-7,0,0,0,0,0,0,0,0,0,0,0,-7,
        49,0,0,0,0,0,0,0,0,0,0,0,0,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        -5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-5,0,0,0,0,0,0,0,0,0,0,0,0,0,
        -44,-44,-44,0,0,53,-44,0,-44,0,-44,0,0,-44,0,0,0,0,0,0,-44,-44,-44,0,-44,0,0,52,0,0,-44,0,0,0,-44,0,0,0,-44,-44,-44,-44,-44,-44,0,-44,-44,0,0,0,0,-44,-44,
        -61,0,54,0,0,0,0,0,-61,0,0,0,0,-61,0,0,0,0,0,0,0,0,0,0,-61,0,0,0,0,0,-61,0,0,0,0,0,0,0,-61,-61,-61,-61,0,0,0,-61,-61,0,0,0,0,0,-61,
        0,0,0,40,29,22,0,36,0,0,0,0,0,42,0,0,0,0,38,0,0,0,0,19,0,0,0,0,0,0,0,0,23,0,0,0,39,0,0,0,0,0,0,0,0,0,0,0,0,0,35,0,0,
        -55,0,-55,0,0,0,0,0,-55,0,0,0,0,-55,0,0,0,0,0,0,-55,0,-55,0,-55,0,0,0,0,0,-55,0,0,0,0,0,0,0,-55,-55,-55,-55,57,56,0,-55,-55,0,0,0,0,0,-55,
        -47,-47,-47,0,0,0,58,0,-47,0,-47,0,0,-47,0,0,0,0,0,0,-47,-47,-47,0,-47,0,0,0,0,0,-47,0,0,0,59,0,0,0,-47,-47,-47,-47,-47,-47,0,-47,-47,0,0,0,0,-47,-47,
        0,0,0,40,29,22,0,36,0,0,0,0,0,42,0,0,0,0,38,0,0,0,0,19,0,0,0,0,0,0,0,0,23,0,0,0,39,0,0,0,0,0,0,0,0,0,0,0,0,0,35,0,0,
        -20,-20,-20,0,0,-20,-20,0,-20,0,-20,0,-20,-20,0,-20,-20,-20,0,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,0,-20,-20,-20,0,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,0,-20,-20,
        -59,0,-59,0,0,0,0,0,-59,0,0,0,0,-59,0,0,0,0,0,0,0,0,61,0,-59,0,0,0,0,0,-59,0,0,0,0,0,0,0,-59,-59,-59,-59,0,0,0,-59,-59,0,0,0,0,0,-59,
        0,0,0,0,0,0,0,0,0,0,0,0,0,-15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-15,0,0,0,0,0,0,0,-15,0,-15,0,0,0,0,0,0,0,0,0,0,0,-15,
        -31,-31,-31,0,0,-31,-31,0,-31,0,-31,0,-31,-31,0,-31,62,64,0,-31,-31,-31,-31,63,-31,65,-31,-31,-31,-31,-31,-31,0,-31,-31,-31,0,-31,-31,-31,-31,-31,-31,-31,-31,-31,-31,-31,-31,-31,0,-31,-31,
        -41,-41,-41,0,0,-41,-41,0,-41,0,-41,0,0,-41,0,0,0,0,0,0,-41,-41,-41,0,-41,0,68,-41,0,0,-41,0,0,66,-41,0,0,0,-41,-41,-41,-41,-41,-41,0,-41,-41,0,67,0,0,-41,-41,
        -65,0,0,0,0,0,0,0,69,0,0,0,0,-65,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-65,0,0,0,0,0,0,0,-65,-65,-65,70,0,0,0,-65,-65,0,0,0,0,0,-65,
        -21,-21,-21,0,0,-21,-21,0,-21,0,-21,0,-21,-21,0,-21,-21,-21,0,-21,-21,-21,-21,-21,-21,-21,-21,-21,-21,-21,-21,-21,0,-21,-21,-21,0,-21,-21,-21,-21,-21,-21,-21,-21,-21,-21,-21,-21,-21,0,-21,-21,
        71,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,0,0,0,0,0,0,0,0,0,0,0,0,0,
        -57,0,-57,0,0,0,0,0,-57,0,0,0,0,-57,0,0,0,0,0,0,73,0,-57,0,-57,0,0,0,0,0,-57,0,0,0,0,0,0,0,-57,-57,-57,-57,0,0,0,-57,-57,0,0,0,0,0,-57,
        -52,74,-52,0,0,0,0,0,-52,0,77,0,0,-52,0,0,0,0,0,0,-52,76,-52,0,-52,0,0,0,0,0,-52,0,0,0,0,0,0,0,-52,-52,-52,-52,-52,-52,0,-52,-52,0,0,0,0,75,-52,
        -26,-26,-26,0,0,-26,-26,0,-26,0,-26,0,-26,-26,0,-26,-26,-26,0,-26,-26,-26,-26,-26,-26,-26,-26,-26,-26,-26,-26,-26,0,-26,-26,-26,0,-26,-26,-26,-26,-26,-26,-26,-26,-26,-26,-26,-26,-26,0,-26,-26,
        -33,-33,-33,0,0,-33,-33,0,-33,0,-33,0,-33,-33,0,-33,0,0,0,-33,-33,-33,-33,0,-33,0,-33,-33,-33,-33,-33,-33,0,-33,-33,-33,0,-33,-33,-33,-33,-33,-33,-33,-33,-33,-33,-33,-33,-33,0,-33,-33,
        -24,-24,-24,0,0,-24,-24,0,-24,0,-24,0,-24,-24,0,-24,-24,-24,0,-24,-24,-24,-24,-24,-24,-24,-24,-24,-24,-24,-24,-24,0,-24,-24,-24,0,-24,-24,-24,-24,-24,-24,-24,-24,-24,-24,-24,-24,-24,0,-24,-24,
        0,0,0,40,29,22,0,36,0,0,0,0,0,42,0,0,0,0,38,0,0,0,0,19,0,0,0,0,0,0,0,0,23,0,0,0,39,0,0,0,0,0,0,0,0,0,0,0,0,0,35,0,0,
        -37,-37,-37,0,0,-37,-37,0,-37,0,-37,0,85,-37,0,82,0,0,0,84,-37,-37,-37,0,-37,0,-37,-37,79,83,-37,86,0,-37,-37,81,0,88,-37,-37,-37,-37,-37,-37,80,-37,-37,87,-37,89,0,-37,-37,
        -23,-23,-23,0,0,-23,-23,0,-23,0,-23,0,-23,-23,0,-23,-23,-23,0,-23,-23,-23,-23,-23,-23,-23,-23,-23,-23,-23,-23,-23,0,-23,-23,-23,0,-23,-23,-23,-23,-23,-23,-23,-23,-23,-23,-23,-23,-23,0,-23,-23,
        0,0,0,40,29,22,0,36,0,0,0,0,0,42,0,0,0,0,38,0,0,0,0,19,0,0,0,0,0,0,0,0,23,0,0,0,39,0,0,0,0,0,0,0,0,0,0,0,0,0,35,0,0,
        -22,-22,-22,0,0,-22,-22,0,-22,0,-22,0,-22,-22,0,-22,-22,-22,0,-22,-22,-22,-22,-22,-22,-22,-22,-22,-22,-22,-22,-22,0,-22,-22,-22,0,-22,-22,-22,-22,-22,-22,-22,-22,-22,-22,-22,-22,-22,0,-22,-22,
        -63,0,0,0,0,0,0,0,-63,0,0,0,0,-63,0,0,0,0,0,0,0,0,0,0,91,0,0,0,0,0,-63,0,0,0,0,0,0,0,-63,-63,-63,-63,0,0,0,-63,-63,0,0,0,0,0,-63,
        -19,-19,-19,0,0,-19,-19,0,-19,0,-19,0,-19,-19,0,-19,-19,-19,0,-19,-19,-19,-19,-19,-19,-19,-19,-19,-19,-19,-19,-19,0,-19,-19,-19,0,-19,-19,-19,-19,-19,-19,-19,-19,-19,-19,-19,-19,-19,0,-19,-19,
        -67,0,0,0,0,0,0,0,0,0,0,0,0,-67,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-67,0,0,0,0,0,0,0,-67,-67,-67,0,0,0,0,-67,-67,0,0,0,0,0,-67,
        0,0,0,0,0,0,0,0,0,0,0,0,0,-17,92,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-17,0,0,0,0,0,0,0,-17,0,-17,0,0,0,0,0,0,0,0,0,0,0,-17,
        0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,4,0,93,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,94,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        95,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,4,0,96,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,97,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        98,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,99,0,0,0,0,0,0,0,0,0,0,0,0,0,
        -3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-3,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,40,29,22,0,36,0,0,0,0,0,42,0,0,0,0,38,0,0,0,0,19,0,0,0,0,0,0,0,0,23,0,0,0,39,0,0,0,0,0,0,0,0,0,0,0,0,0,35,0,0,
        0,0,0,40,29,22,0,36,0,0,0,0,0,42,0,0,0,0,38,0,0,0,0,19,0,0,0,0,0,0,0,0,23,0,0,0,39,0,0,0,0,0,0,0,0,0,0,0,0,0,35,0,0,
        0,0,0,40,29,22,0,36,0,0,0,0,0,42,0,0,0,0,38,0,0,0,0,19,0,0,0,0,0,0,0,0,23,0,0,0,39,0,0,0,0,0,0,0,0,0,0,0,0,0,35,0,0,
        104,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,40,29,22,0,36,0,0,0,0,0,42,0,0,0,0,38,0,0,0,0,19,0,0,0,0,0,0,0,0,23,0,0,0,39,0,0,0,0,0,0,0,0,0,0,0,0,0,35,0,0,
        0,0,0,40,29,22,0,36,0,0,0,0,0,42,0,0,0,0,38,0,0,0,0,19,0,0,0,0,0,0,0,0,23,0,0,0,39,0,0,0,0,0,0,0,0,0,0,0,0,0,35,0,0,
        0,0,0,40,29,22,0,36,0,0,0,0,0,42,0,0,0,0,38,0,0,0,0,19,0,0,0,0,0,0,0,0,23,0,0,0,39,0,0,0,0,0,0,0,0,0,0,0,0,0,35,0,0,
        0,0,0,40,29,22,0,36,0,0,0,0,0,42,0,0,0,0,38,0,0,0,0,19,0,0,0,0,0,0,0,0,23,0,0,0,39,0,0,0,0,0,0,0,0,0,0,0,0,0,35,0,0,
        -34,-34,-34,0,0,-34,-34,0,-34,0,-34,0,-34,-34,0,-34,0,0,0,-34,-34,-34,-34,0,-34,0,-34,-34,-34,-34,-34,-34,0,-34,-34,-34,0,-34,-34,-34,-34,-34,-34,-34,-34,-34,-34,-34,-34,-34,0,-34,-34,
        0,0,0,40,29,22,0,36,0,0,0,0,0,42,0,0,0,0,38,0,0,0,0,19,0,0,0,0,0,0,0,0,23,0,0,0,39,0,0,0,0,0,0,0,0,0,0,0,0,0,35,0,0,
        0,0,0,40,29,22,0,36,0,0,0,0,0,42,0,0,0,0,38,0,0,0,0,19,0,0,0,0,0,0,0,0,23,0,0,0,39,0,0,0,0,0,0,0,0,0,0,0,0,0,35,0,0,
        111,0,0,40,29,22,0,36,0,0,0,0,0,42,0,0,0,0,38,0,0,0,0,19,0,0,0,0,0,0,0,0,23,0,0,0,39,0,0,0,0,0,0,0,0,0,0,0,0,0,35,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,113,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,40,29,0,0,0,0,0,0,0,0,42,0,0,0,0,38,0,0,0,0,19,0,0,0,0,0,0,0,0,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,35,0,0,
        0,0,0,40,29,22,0,36,0,0,0,0,0,42,0,0,0,0,38,0,0,0,0,19,0,0,0,0,0,0,0,0,23,0,0,0,39,0,0,0,0,0,0,0,0,0,0,0,0,0,35,0,0,
        0,0,0,40,29,22,0,36,0,0,0,0,0,42,0,0,0,0,38,0,0,0,0,19,0,0,0,0,0,0,0,0,23,0,0,0,39,0,0,0,0,0,0,0,0,0,0,0,0,0,35,0,0,
        0,0,0,40,29,22,0,36,0,0,0,0,0,42,0,0,0,0,38,0,0,0,0,19,0,0,0,0,0,0,0,0,23,0,0,0,39,0,0,0,0,0,0,0,0,0,0,0,0,0,35,0,0,
        0,0,0,40,29,22,0,36,0,0,0,0,0,42,0,0,0,0,38,0,0,0,0,19,0,0,0,0,0,0,0,0,23,0,0,0,39,0,0,0,0,0,0,0,0,0,0,0,0,0,35,0,0,
        0,0,0,40,29,22,0,36,0,0,0,0,0,42,0,0,0,0,38,0,0,0,0,19,0,0,0,0,0,0,0,0,23,0,0,0,39,0,0,0,0,0,0,0,0,0,0,0,0,0,35,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,-16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-16,0,0,0,0,0,0,0,-16,0,-16,0,0,0,0,0,0,0,0,0,0,0,-16,
        0,0,0,40,29,22,0,36,0,0,0,0,0,42,0,0,0,0,38,0,0,0,0,19,0,0,0,0,0,0,0,0,23,0,0,0,39,0,0,0,0,0,0,0,0,0,0,0,0,0,35,0,0,
        0,0,0,40,29,22,0,36,0,0,0,0,0,42,0,0,0,0,38,0,0,0,0,19,0,0,0,0,0,0,0,0,23,0,0,0,39,0,0,0,0,0,0,0,0,0,0,0,0,0,35,0,0,
        0,0,0,40,29,22,0,36,0,0,0,0,0,42,0,0,0,0,38,0,0,0,0,19,0,0,0,0,0,0,0,0,23,0,0,0,39,0,0,0,0,0,0,0,0,0,0,0,0,0,35,0,0,
        0,0,0,40,29,22,0,36,0,0,0,0,0,42,0,0,0,0,38,0,0,0,0,19,0,0,0,0,0,0,0,0,23,0,0,0,39,0,0,0,0,0,0,0,0,0,0,0,0,0,35,0,0,
        0,0,0,40,29,22,0,36,0,0,0,0,0,42,0,0,0,0,38,0,0,0,0,19,0,0,0,0,0,0,0,0,23,0,0,0,39,0,0,0,0,0,0,0,0,0,0,0,0,0,35,0,0,
        0,0,0,40,29,22,0,36,0,0,0,0,0,42,0,0,0,0,38,0,0,0,0,19,0,0,0,0,0,0,0,0,23,0,0,0,39,0,0,0,0,0,0,0,0,0,0,0,0,0,35,0,0,
        -35,-35,-35,0,0,-35,-35,0,-35,0,-35,0,-35,-35,0,-35,0,0,0,-35,-35,-35,-35,0,-35,0,-35,-35,-35,-35,-35,-35,0,-35,-35,-35,0,-35,-35,-35,-35,-35,-35,-35,-35,-35,-35,-35,-35,-35,0,-35,-35,
        0,0,0,40,29,22,0,36,0,0,0,0,0,42,0,0,0,0,38,0,0,0,0,19,0,0,0,0,0,0,0,0,23,0,0,0,39,0,0,0,0,0,0,0,0,0,0,0,0,0,35,0,0,
        0,0,0,40,29,22,0,36,0,0,0,0,0,42,0,0,0,0,38,0,0,0,0,19,0,0,0,0,0,0,0,0,23,0,0,0,39,0,0,0,0,0,0,0,0,0,0,0,0,0,35,0,0,
        0,0,0,40,29,22,0,36,0,0,0,0,0,42,0,0,0,0,38,0,0,0,0,19,0,0,0,0,0,0,0,0,23,0,0,0,39,0,0,0,0,0,0,0,0,0,0,0,0,0,35,0,0,
        0,0,0,40,29,22,0,36,0,0,0,0,0,42,0,0,0,0,38,0,0,0,0,19,0,0,0,0,0,0,0,0,23,0,0,0,39,0,0,0,0,0,0,0,0,0,0,0,0,0,35,0,0,
        0,0,0,40,29,22,0,36,0,0,0,0,0,42,0,0,0,0,38,0,0,0,0,19,0,0,0,0,0,0,0,0,23,0,0,0,39,0,0,0,0,0,0,0,0,0,0,0,0,0,35,0,0,
        0,0,0,40,29,22,0,36,0,0,0,0,0,42,0,0,0,0,38,0,0,0,0,19,0,0,0,0,0,0,0,0,23,0,0,0,39,0,0,0,0,0,0,0,0,0,0,0,0,0,35,0,0,
        0,0,0,40,29,22,0,36,0,0,0,0,0,42,0,0,0,0,38,0,0,0,0,19,0,0,0,0,0,0,0,0,23,0,0,0,39,0,0,0,0,0,0,0,0,0,0,0,0,0,35,0,0,
        0,0,0,40,29,22,0,36,0,0,0,0,0,42,0,0,0,0,38,0,0,0,0,19,0,0,0,0,0,0,0,0,23,0,0,0,39,0,0,0,0,0,0,0,0,0,0,0,0,0,35,0,0,
        0,0,0,40,29,22,0,36,0,0,0,0,0,42,0,0,0,0,38,0,0,0,0,19,0,0,0,0,0,0,0,0,23,0,0,0,39,0,0,0,0,0,0,0,0,0,0,0,0,0,35,0,0,
        0,0,0,40,29,22,0,36,0,0,0,0,0,42,0,0,0,0,38,0,0,0,0,19,0,0,0,0,0,0,0,0,23,0,0,0,39,0,0,0,0,0,0,0,0,0,0,0,0,0,35,0,0,
        0,0,0,40,29,22,0,36,0,0,0,0,0,42,0,0,0,0,38,0,0,0,0,19,0,0,0,0,0,0,0,0,23,0,0,0,39,0,0,0,0,0,0,0,0,0,0,0,0,0,35,0,0,
        -36,-36,-36,0,0,-36,-36,0,-36,0,-36,0,-36,-36,0,-36,0,0,0,-36,-36,-36,-36,0,-36,0,-36,-36,-36,-36,-36,-36,0,-36,-36,-36,0,-36,-36,-36,-36,-36,-36,-36,-36,-36,-36,-36,-36,-36,0,-36,-36,
        0,0,0,40,29,22,0,36,0,0,0,0,0,42,0,0,0,0,38,0,0,0,0,19,0,0,0,0,0,0,0,0,23,0,0,0,39,0,0,0,0,0,0,0,0,0,0,0,0,0,35,0,0,
        0,0,0,40,29,22,0,36,0,0,0,0,0,42,0,0,0,0,38,0,0,0,0,19,0,0,0,0,0,0,0,0,23,0,0,0,39,0,0,0,0,0,0,0,0,0,0,0,0,0,35,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,-12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-12,0,0,0,0,0,0,0,-12,0,-12,0,0,0,0,0,0,0,0,0,0,0,-12,
        0,0,0,0,0,0,0,0,0,0,0,0,0,-7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-7,0,0,0,0,0,0,0,-7,0,-7,0,0,0,0,0,0,0,0,0,0,0,-7,
        0,0,0,0,0,0,0,0,0,0,0,140,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,-9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-9,0,0,0,0,0,0,0,-9,0,-9,0,0,0,0,0,0,0,0,0,0,0,-9,
        0,0,0,0,0,0,0,0,0,0,0,0,0,-7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-7,0,0,0,0,0,0,0,-7,0,-7,0,0,0,0,0,0,0,0,0,0,0,-7,
        0,0,0,0,0,0,0,0,0,0,0,142,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,143,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        -37,-37,-37,0,0,-37,-37,0,-37,0,-37,0,0,-37,0,0,0,0,0,0,-37,-37,-37,0,-37,0,-37,-37,0,0,-37,0,0,-37,-37,0,0,0,-37,-37,-37,-37,-37,-37,0,-37,-37,0,-37,0,0,-37,-37,
        -42,-42,-42,0,0,-42,-42,0,-42,0,-42,0,0,-42,0,0,0,0,0,0,-42,-42,-42,0,-42,0,68,-42,0,0,-42,0,0,66,-42,0,0,0,-42,-42,-42,-42,-42,-42,0,-42,-42,0,67,0,0,-42,-42,
        -43,-43,-43,0,0,-43,-43,0,-43,0,-43,0,0,-43,0,0,0,0,0,0,-43,-43,-43,0,-43,0,68,-43,0,0,-43,0,0,66,-43,0,0,0,-43,-43,-43,-43,-43,-43,0,-43,-43,0,67,0,0,-43,-43,
        -60,0,-60,0,0,0,0,0,-60,0,0,0,0,-60,0,0,0,0,0,0,0,0,61,0,-60,0,0,0,0,0,-60,0,0,0,0,0,0,0,-60,-60,-60,-60,0,0,0,-60,-60,0,0,0,0,0,-60,
        -25,-25,-25,0,0,-25,-25,0,-25,0,-25,0,-25,-25,0,-25,-25,-25,0,-25,-25,-25,-25,-25,-25,-25,-25,-25,-25,-25,-25,-25,0,-25,-25,-25,0,-25,-25,-25,-25,-25,-25,-25,-25,-25,-25,-25,-25,-25,0,-25,-25,
        -54,74,-54,0,0,0,0,0,-54,0,77,0,0,-54,0,0,0,0,0,0,-54,76,-54,0,-54,0,0,0,0,0,-54,0,0,0,0,0,0,0,-54,-54,-54,-54,-54,-54,0,-54,-54,0,0,0,0,75,-54,
        -53,74,-53,0,0,0,0,0,-53,0,77,0,0,-53,0,0,0,0,0,0,-53,76,-53,0,-53,0,0,0,0,0,-53,0,0,0,0,0,0,0,-53,-53,-53,-53,-53,-53,0,-53,-53,0,0,0,0,75,-53,
        -46,-46,-46,0,0,53,-46,0,-46,0,-46,0,0,-46,0,0,0,0,0,0,-46,-46,-46,0,-46,0,0,52,0,0,-46,0,0,0,-46,0,0,0,-46,-46,-46,-46,-46,-46,0,-46,-46,0,0,0,0,-46,-46,
        -45,-45,-45,0,0,53,-45,0,-45,0,-45,0,0,-45,0,0,0,0,0,0,-45,-45,-45,0,-45,0,0,52,0,0,-45,0,0,0,-45,0,0,0,-45,-45,-45,-45,-45,-45,0,-45,-45,0,0,0,0,-45,-45,
        -58,0,-58,0,0,0,0,0,-58,0,0,0,0,-58,0,0,0,0,0,0,73,0,-58,0,-58,0,0,0,0,0,-58,0,0,0,0,0,0,0,-58,-58,-58,-58,0,0,0,-58,-58,0,0,0,0,0,-58,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,144,0,0,0,0,0,0,
        -28,-28,-28,0,0,-28,-28,0,-28,0,-28,0,-28,-28,0,-28,-28,-28,0,-28,-28,-28,-28,-28,-28,-28,-28,-28,-28,-28,-28,-28,0,-28,-28,-28,0,-28,-28,-28,-28,-28,-28,-28,-28,-28,-28,-28,-28,-28,0,-28,-28,
        145,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,0,0,0,0,0,0,0,0,0,0,0,0,0,
        -30,-30,-30,0,0,-30,-30,0,-30,0,-30,0,-30,-30,0,-30,-30,-30,0,-30,-30,-30,-30,-30,-30,-30,-30,-30,-30,-30,-30,-30,0,-30,-30,-30,0,-30,-30,-30,-30,-30,-30,-30,-30,-30,-30,-30,-30,-30,0,-30,-30,
        -32,-32,-32,0,0,-32,-32,0,-32,0,-32,0,-32,-32,0,-32,0,0,0,-32,-32,-32,-32,0,-32,0,-32,-32,-32,-32,-32,-32,0,-32,-32,-32,0,-32,-32,-32,-32,-32,-32,-32,-32,-32,-32,-32,-32,-32,0,-32,-32,
        -39,-39,-39,0,0,-39,-39,0,-39,0,-39,0,0,-39,0,0,0,0,0,0,-39,-39,-39,0,-39,0,-39,-39,0,0,-39,0,0,-39,-39,0,0,0,-39,-39,-39,-39,-39,-39,0,-39,-39,0,-39,0,0,-39,-39,
        -40,-40,-40,0,0,-40,-40,0,-40,0,-40,0,0,-40,0,0,0,0,0,0,-40,-40,-40,0,-40,0,-40,-40,0,0,-40,0,0,-40,-40,0,0,0,-40,-40,-40,-40,-40,-40,0,-40,-40,0,-40,0,0,-40,-40,
        -38,-38,-38,0,0,-38,-38,0,-38,0,-38,0,0,-38,0,0,0,0,0,0,-38,-38,-38,0,-38,0,-38,-38,0,0,-38,0,0,-38,-38,0,0,0,-38,-38,-38,-38,-38,-38,0,-38,-38,0,-38,0,0,-38,-38,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,146,0,0,0,0,0,0,0,
        -64,0,0,0,0,0,0,0,-64,0,0,0,0,-64,0,0,0,0,0,0,0,0,0,0,91,0,0,0,0,0,-64,0,0,0,0,0,0,0,-64,-64,-64,-64,0,0,0,-64,-64,0,0,0,0,0,-64,
        -6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-6,0,0,0,0,0,0,0,0,0,0,0,0,0,
        -56,0,-56,0,0,0,0,0,-56,0,0,0,0,-56,0,0,0,0,0,0,-56,0,-56,0,-56,0,0,0,0,0,-56,0,0,0,0,0,0,0,-56,-56,-56,-56,57,56,0,-56,-56,0,0,0,0,0,-56,
        -50,-50,-50,0,0,0,58,0,-50,0,-50,0,0,-50,0,0,0,0,0,0,-50,-50,-50,0,-50,0,0,0,0,0,-50,0,0,0,59,0,0,0,-50,-50,-50,-50,-50,-50,0,-50,-50,0,0,0,0,-50,-50,
        -51,-51,-51,0,0,0,58,0,-51,0,-51,0,0,-51,0,0,0,0,0,0,-51,-51,-51,0,-51,0,0,0,0,0,-51,0,0,0,59,0,0,0,-51,-51,-51,-51,-51,-51,0,-51,-51,0,0,0,0,-51,-51,
        -48,-48,-48,0,0,0,58,0,-48,0,-48,0,0,-48,0,0,0,0,0,0,-48,-48,-48,0,-48,0,0,0,0,0,-48,0,0,0,59,0,0,0,-48,-48,-48,-48,-48,-48,0,-48,-48,0,0,0,0,-48,-48,
        -49,-49,-49,0,0,0,58,0,-49,0,-49,0,0,-49,0,0,0,0,0,0,-49,-49,-49,0,-49,0,0,0,0,0,-49,0,0,0,59,0,0,0,-49,-49,-49,-49,-49,-49,0,-49,-49,0,0,0,0,-49,-49,
        -76,0,0,0,0,0,0,0,0,0,0,0,0,-76,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-76,0,0,0,0,0,0,0,-76,-76,-76,0,0,0,0,-76,-76,0,0,0,0,0,-76,
        -69,0,0,0,0,0,0,0,0,0,0,0,0,-69,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-69,0,0,0,0,0,0,0,-69,-69,-69,0,0,0,0,-69,-69,0,0,0,0,0,-69,
        -74,0,0,0,0,0,0,0,0,0,0,0,0,-74,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-74,0,0,0,0,0,0,0,-74,-74,-74,0,0,0,0,-74,-74,0,0,0,0,0,-74,
        -71,0,0,0,0,0,0,0,0,0,0,0,0,-71,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-71,0,0,0,0,0,0,0,-71,-71,-71,0,0,0,0,-71,-71,0,0,0,0,0,-71,
        -77,0,0,0,0,0,0,0,0,0,0,0,0,-77,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-77,0,0,0,0,0,0,0,-77,-77,-77,0,0,0,0,-77,-77,0,0,0,0,0,-77,
        -73,0,0,0,0,0,0,0,0,0,0,0,0,-73,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-73,0,0,0,0,0,0,0,-73,-73,-73,0,0,0,0,-73,-73,0,0,0,0,0,-73,
        -75,0,0,0,0,0,0,0,0,0,0,0,0,-75,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-75,0,0,0,0,0,0,0,-75,-75,-75,0,0,0,0,-75,-75,0,0,0,0,0,-75,
        -68,0,0,0,0,0,0,0,0,0,0,0,0,-68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-68,0,0,0,0,0,0,0,-68,-68,-68,0,0,0,0,-68,-68,0,0,0,0,0,-68,
        -72,0,0,0,0,0,0,0,0,0,0,0,0,-72,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-72,0,0,0,0,0,0,0,-72,-72,-72,0,0,0,0,-72,-72,0,0,0,0,0,-72,
        -78,0,0,0,0,0,0,0,0,0,0,0,0,-78,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-78,0,0,0,0,0,0,0,-78,-78,-78,0,0,0,0,-78,-78,0,0,0,0,0,-78,
        -70,0,0,0,0,0,0,0,0,0,0,0,0,-70,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-70,0,0,0,0,0,0,0,-70,-70,-70,0,0,0,0,-70,-70,0,0,0,0,0,-70,
        -62,0,54,0,0,0,0,0,-62,0,0,0,0,-62,0,0,0,0,0,0,0,0,0,0,-62,0,0,0,0,0,-62,0,0,0,0,0,0,0,-62,-62,-62,-62,0,0,0,-62,-62,0,0,0,0,0,-62,
        0,0,0,0,0,0,0,0,0,0,0,0,0,-18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-18,0,0,0,0,0,0,0,-18,0,-18,0,0,0,0,0,0,0,0,0,0,0,-18,
        0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,4,0,147,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,-7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-7,0,0,0,0,0,0,0,-7,0,-7,0,0,0,0,0,0,0,0,0,0,0,-7,
        0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,4,0,149,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,-7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-7,0,0,0,0,0,0,0,-7,0,-7,0,0,0,0,0,0,0,0,0,0,0,-7,
        -4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-4,0,0,0,0,0,0,0,0,0,0,0,0,0,
        -27,-27,-27,0,0,-27,-27,0,-27,0,-27,0,-27,-27,0,-27,-27,-27,0,-27,-27,-27,-27,-27,-27,-27,-27,-27,-27,-27,-27,-27,0,-27,-27,-27,0,-27,-27,-27,-27,-27,-27,-27,-27,-27,-27,-27,-27,-27,0,-27,-27,
        -29,-29,-29,0,0,-29,-29,0,-29,0,-29,0,-29,-29,0,-29,-29,-29,0,-29,-29,-29,-29,-29,-29,-29,-29,-29,-29,-29,-29,-29,0,-29,-29,-29,0,-29,-29,-29,-29,-29,-29,-29,-29,-29,-29,-29,-29,-29,0,-29,-29,
        0,0,0,40,29,22,0,36,0,0,0,0,0,42,0,0,0,0,38,0,0,0,0,19,0,0,0,0,0,0,0,0,23,0,0,0,39,0,0,0,0,0,0,0,0,0,0,0,0,0,35,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,-13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-13,0,0,0,0,0,0,0,-13,0,-13,0,0,0,0,0,0,0,0,0,0,0,-13,
        0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,4,0,152,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,-10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-10,0,0,0,0,0,0,0,-10,0,-10,0,0,0,0,0,0,0,0,0,0,0,-10,
        0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,4,0,153,0,0,0,0,0,0,0,0,0,0,0,0,
        -66,0,0,0,0,0,0,0,0,0,0,0,0,-66,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-66,0,0,0,0,0,0,0,-66,-66,-66,0,0,0,0,-66,-66,0,0,0,0,0,-66,
        0,0,0,0,0,0,0,0,0,0,0,0,0,-14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-14,0,0,0,0,0,0,0,-14,0,-14,0,0,0,0,0,0,0,0,0,0,0,-14,
        0,0,0,0,0,0,0,0,0,0,0,0,0,-11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-11,0,0,0,0,0,0,0,-11,0,-11,0,0,0,0,0,0,0,0,0,0,0,-11};
    static constexpr int productionLabels[] = {13,2,2,4,4,20,20,15,15,15,15,15,15,15,15,15,15,6,6,6,6,6,6,6,5,5,5,5,5,17,17,9,9,9,9,19,19,19,19,16,16,16,14,14,14,7,7,7,7,7,0,0,0,3,3,18,18,8,8,12,12,10,10,11,11,1,1,1,1,1,1,1,1,1,1,1,1};
public:
    union StackEntryPayload {
        void* _grx_object;
        ExpressionNode equality_expression;
        ExpressionNode expression;
        Vector_String formal_parameters;
        ExpressionNode bitwise_and_expression;
        Vector_ExpressionNode actual_parameters;
        ExpressionNode postfix_expression;
        ExpressionNode simple_expression;
        ExpressionNode comparison_expression;
        ExpressionNode bitwise_or_expression;
        ExpressionNode unary_expression;
        ExpressionNode or_expression;
        ExpressionNode ternary_expression;
        ExpressionNode and_expression;
        RootNode root;
        ExpressionNode bitwise_shift_expression;
        StatementNode statement;
        ExpressionNode additive_expression;
        ExpressionNode pow_expression;
        ExpressionNode bitwise_xor_expression;
        ExpressionNode multiplicative_expression;
        Vector_StatementNode statement_list;
    };
private:
    struct StackEntry {
        int previousState;
        StackEntryPayload payload;
        StackEntry(int previousState, StackEntryPayload payload) : previousState(previousState), payload(payload) {}
        StackEntry() : previousState(0), payload({._grx_object = nullptr}) {}
    };
    static StackEntryPayload _reduction0(std::vector<StackEntry>* _grx_stack) {
        Vector_StatementNode SL = _grx_stack->back().payload.statement_list;
        _grx_stack->pop_back();
        RootNode v;
        {
         v = new RootNode(std::move(SL)); 
        }
        StackEntryPayload _grx_v = {.root = v};
        return _grx_v;
    }
    static StackEntryPayload _reduction1(std::vector<StackEntry>* _grx_stack) {
        void* NAME = _grx_stack->back().payload._grx_object;
        _grx_stack->pop_back();
        Vector_String v;
        {
         std::vector<std::string> v; v.push_back(NAME); FPS = std::move(v); 
        }
        StackEntryPayload _grx_v = {.formal_parameters = v};
        return _grx_v;
    }
    static StackEntryPayload _reduction2(std::vector<StackEntry>* _grx_stack) {
        void* NAME = _grx_stack->back().payload._grx_object;
        _grx_stack->pop_back();
        _grx_stack->pop_back();
        Vector_String FPS = _grx_stack->back().payload.formal_parameters;
        _grx_stack->pop_back();
        Vector_String v;
        {
         v = std::move(FPS); v.push_back(NAME); 
        }
        StackEntryPayload _grx_v = {.formal_parameters = v};
        return _grx_v;
    }
    static StackEntryPayload _reduction3(std::vector<StackEntry>* _grx_stack) {
        ExpressionNode E = _grx_stack->back().payload.expression;
        _grx_stack->pop_back();
        Vector_ExpressionNode v;
        {
         v = [E]; 
        }
        StackEntryPayload _grx_v = {.actual_parameters = v};
        return _grx_v;
    }
    static StackEntryPayload _reduction4(std::vector<StackEntry>* _grx_stack) {
        ExpressionNode E = _grx_stack->back().payload.expression;
        _grx_stack->pop_back();
        _grx_stack->pop_back();
        Vector_ExpressionNode APS = _grx_stack->back().payload.actual_parameters;
        _grx_stack->pop_back();
        Vector_ExpressionNode v;
        {
         APS.push_back(E); v = APS;  
        }
        StackEntryPayload _grx_v = {.actual_parameters = v};
        return _grx_v;
    }
    static StackEntryPayload _reduction5(std::vector<StackEntry>* _grx_stack) {
        Vector_StatementNode v;
        {
         v = [SL]; 
        }
        StackEntryPayload _grx_v = {.statement_list = v};
        return _grx_v;
    }
    static StackEntryPayload _reduction6(std::vector<StackEntry>* _grx_stack) {
        StatementNode S = _grx_stack->back().payload.statement;
        _grx_stack->pop_back();
        Vector_StatementNode SL = _grx_stack->back().payload.statement_list;
        _grx_stack->pop_back();
        Vector_StatementNode v;
        {
         SL.push_back(S); v = std::move(SL); 
        }
        StackEntryPayload _grx_v = {.statement_list = v};
        return _grx_v;
    }
    static StackEntryPayload _reduction7(std::vector<StackEntry>* _grx_stack) {
        _grx_stack->pop_back();
        Vector_StatementNode SL = _grx_stack->back().payload.statement_list;
        _grx_stack->pop_back();
        _grx_stack->pop_back();
        _grx_stack->pop_back();
        _grx_stack->pop_back();
        StatementNode v;
        {
         v = new FunctionDefinitionNode(SL); 
        }
        StackEntryPayload _grx_v = {.statement = v};
        return _grx_v;
    }
    static StackEntryPayload _reduction8(std::vector<StackEntry>* _grx_stack) {
        _grx_stack->pop_back();
        Vector_StatementNode SL = _grx_stack->back().payload.statement_list;
        _grx_stack->pop_back();
        _grx_stack->pop_back();
        _grx_stack->pop_back();
        _grx_stack->pop_back();
        _grx_stack->pop_back();
        _grx_stack->pop_back();
        StatementNode v;
        {
         v = new FunctionDefinitionNode(SL); 
        }
        StackEntryPayload _grx_v = {.statement = v};
        return _grx_v;
    }
    static StackEntryPayload _reduction9(std::vector<StackEntry>* _grx_stack) {
        _grx_stack->pop_back();
        Vector_StatementNode SL = _grx_stack->back().payload.statement_list;
        _grx_stack->pop_back();
        _grx_stack->pop_back();
        _grx_stack->pop_back();
        Vector_String FP = _grx_stack->back().payload.formal_parameters;
        _grx_stack->pop_back();
        _grx_stack->pop_back();
        _grx_stack->pop_back();
        _grx_stack->pop_back();
        StatementNode v;
        {
         v = new FunctionDefinitionNode(FP, SL); 
        }
        StackEntryPayload _grx_v = {.statement = v};
        return _grx_v;
    }
    static StackEntryPayload _reduction10(std::vector<StackEntry>* _grx_stack) {
        _grx_stack->pop_back();
        Vector_StatementNode SL = _grx_stack->back().payload.statement_list;
        _grx_stack->pop_back();
        _grx_stack->pop_back();
        _grx_stack->pop_back();
        _grx_stack->pop_back();
        StatementNode v;
        {
         v = new EventHandlerDefinitionNode(SL); 
        }
        StackEntryPayload _grx_v = {.statement = v};
        return _grx_v;
    }
    static StackEntryPayload _reduction11(std::vector<StackEntry>* _grx_stack) {
        _grx_stack->pop_back();
        Vector_StatementNode SL = _grx_stack->back().payload.statement_list;
        _grx_stack->pop_back();
        _grx_stack->pop_back();
        _grx_stack->pop_back();
        _grx_stack->pop_back();
        _grx_stack->pop_back();
        _grx_stack->pop_back();
        StatementNode v;
        {
         v = new EventHandlerDefinitionNode(SL); 
        }
        StackEntryPayload _grx_v = {.statement = v};
        return _grx_v;
    }
    static StackEntryPayload _reduction12(std::vector<StackEntry>* _grx_stack) {
        _grx_stack->pop_back();
        Vector_StatementNode SL = _grx_stack->back().payload.statement_list;
        _grx_stack->pop_back();
        _grx_stack->pop_back();
        _grx_stack->pop_back();
        Vector_ExpressionNode AP = _grx_stack->back().payload.actual_parameters;
        _grx_stack->pop_back();
        _grx_stack->pop_back();
        _grx_stack->pop_back();
        _grx_stack->pop_back();
        StatementNode v;
        {
         v = EventHandlerDefinitionNode(AP, SL); 
        }
        StackEntryPayload _grx_v = {.statement = v};
        return _grx_v;
    }
    static StackEntryPayload _reduction13(std::vector<StackEntry>* _grx_stack) {
        _grx_stack->pop_back();
        _grx_stack->pop_back();
        void* FUNCTION_NAME = _grx_stack->back().payload._grx_object;
        _grx_stack->pop_back();
        StatementNode v;
        {
         v = new FunctionCallStatementNode(FUNCTION_NAME); 
        }
        StackEntryPayload _grx_v = {.statement = v};
        return _grx_v;
    }
    static StackEntryPayload _reduction14(std::vector<StackEntry>* _grx_stack) {
        _grx_stack->pop_back();
        Vector_ExpressionNode APS = _grx_stack->back().payload.actual_parameters;
        _grx_stack->pop_back();
        _grx_stack->pop_back();
        void* FUNCTION_NAME = _grx_stack->back().payload._grx_object;
        _grx_stack->pop_back();
        StatementNode v;
        {
         v = new FunctionCallStatementNode(FUNCTION_NAME, APS); 
        }
        StackEntryPayload _grx_v = {.statement = v};
        return _grx_v;
    }
    static StackEntryPayload _reduction15(std::vector<StackEntry>* _grx_stack) {
        _grx_stack->pop_back();
        void* MODE = _grx_stack->back().payload._grx_object;
        _grx_stack->pop_back();
        void* DISPLAY = _grx_stack->back().payload._grx_object;
        _grx_stack->pop_back();
        StatementNode v;
        {
         v = new PushStatementNode(DISPLAY, MODE); 
        }
        StackEntryPayload _grx_v = {.statement = v};
        return _grx_v;
    }
    static StackEntryPayload _reduction16(std::vector<StackEntry>* _grx_stack) {
        ExpressionNode CONDITION = _grx_stack->back().payload.expression;
        _grx_stack->pop_back();
        _grx_stack->pop_back();
        _grx_stack->pop_back();
        void* MODE = _grx_stack->back().payload._grx_object;
        _grx_stack->pop_back();
        void* DISPLAY = _grx_stack->back().payload._grx_object;
        _grx_stack->pop_back();
        StatementNode v;
        {
         v = new PushStatementNode(DISPLAY, MODE, CONDITION); 
        }
        StackEntryPayload _grx_v = {.statement = v};
        return _grx_v;
    }
    static StackEntryPayload _reduction17(std::vector<StackEntry>* _grx_stack) {
        void* T = _grx_stack->back().payload._grx_object;
        _grx_stack->pop_back();
        ExpressionNode v;
        {
         v = new IdExpressionNode(T.payload.string); 
        }
        StackEntryPayload _grx_v = {.simple_expression = v};
        return _grx_v;
    }
    static StackEntryPayload _reduction18(std::vector<StackEntry>* _grx_stack) {
        void* T = _grx_stack->back().payload._grx_object;
        _grx_stack->pop_back();
        ExpressionNode v;
        {
         v = new IntLiteralExpressionNode(T.payload.TODO); 
        }
        StackEntryPayload _grx_v = {.simple_expression = v};
        return _grx_v;
    }
    static StackEntryPayload _reduction19(std::vector<StackEntry>* _grx_stack) {
        void* T = _grx_stack->back().payload._grx_object;
        _grx_stack->pop_back();
        ExpressionNode v;
        {
         v = new FloatLiteralExpressionNode(T.payload.TODO); 
        }
        StackEntryPayload _grx_v = {.simple_expression = v};
        return _grx_v;
    }
    static StackEntryPayload _reduction20(std::vector<StackEntry>* _grx_stack) {
        void* T = _grx_stack->back().payload._grx_object;
        _grx_stack->pop_back();
        ExpressionNode v;
        {
         v = new StringLiteralExpressionNode(T.payload.TODO); 
        }
        StackEntryPayload _grx_v = {.simple_expression = v};
        return _grx_v;
    }
    static StackEntryPayload _reduction21(std::vector<StackEntry>* _grx_stack) {
        _grx_stack->pop_back();
        ExpressionNode v;
        {
         v = new BooleanLiteralExpressionNode(true); 
        }
        StackEntryPayload _grx_v = {.simple_expression = v};
        return _grx_v;
    }
    static StackEntryPayload _reduction22(std::vector<StackEntry>* _grx_stack) {
        _grx_stack->pop_back();
        ExpressionNode v;
        {
         v = new BooleanLiteralExpressionNode(false); 
        }
        StackEntryPayload _grx_v = {.simple_expression = v};
        return _grx_v;
    }
    static StackEntryPayload _reduction23(std::vector<StackEntry>* _grx_stack) {
        _grx_stack->pop_back();
        ExpressionNode E_INNER = _grx_stack->back().payload.expression;
        _grx_stack->pop_back();
        _grx_stack->pop_back();
        ExpressionNode v;
        {
         v = E_INNER; 
        }
        StackEntryPayload _grx_v = {.simple_expression = v};
        return _grx_v;
    }
    static StackEntryPayload _reduction24(std::vector<StackEntry>* _grx_stack) {
        ExpressionNode E_INNER = _grx_stack->back().payload.simple_expression;
        _grx_stack->pop_back();
        ExpressionNode v;
        {
         v = E_INNER; 
        }
        StackEntryPayload _grx_v = {.postfix_expression = v};
        return _grx_v;
    }
    static StackEntryPayload _reduction25(std::vector<StackEntry>* _grx_stack) {
        _grx_stack->pop_back();
        ExpressionNode INDEX = _grx_stack->back().payload.expression;
        _grx_stack->pop_back();
        _grx_stack->pop_back();
        ExpressionNode BASE = _grx_stack->back().payload.postfix_expression;
        _grx_stack->pop_back();
        ExpressionNode v;
        {
         v = new IndexingExpressionNode(BASE, INDEX); 
        }
        StackEntryPayload _grx_v = {.postfix_expression = v};
        return _grx_v;
    }
    static StackEntryPayload _reduction26(std::vector<StackEntry>* _grx_stack) {
        _grx_stack->pop_back();
        _grx_stack->pop_back();
        ExpressionNode BASE = _grx_stack->back().payload.postfix_expression;
        _grx_stack->pop_back();
        ExpressionNode v;
        {
         v = new FunctionCallExpressionNode(BASE); 
        }
        StackEntryPayload _grx_v = {.postfix_expression = v};
        return _grx_v;
    }
    static StackEntryPayload _reduction27(std::vector<StackEntry>* _grx_stack) {
        _grx_stack->pop_back();
        Vector_ExpressionNode A_PARAMS = _grx_stack->back().payload.actual_parameters;
        _grx_stack->pop_back();
        _grx_stack->pop_back();
        ExpressionNode BASE = _grx_stack->back().payload.postfix_expression;
        _grx_stack->pop_back();
        ExpressionNode v;
        {
         v = new FunctionCallExpressionNode(BASE, A_PARAMS); 
        }
        StackEntryPayload _grx_v = {.postfix_expression = v};
        return _grx_v;
    }
    static StackEntryPayload _reduction28(std::vector<StackEntry>* _grx_stack) {
        void* MEMBER = _grx_stack->back().payload._grx_object;
        _grx_stack->pop_back();
        _grx_stack->pop_back();
        ExpressionNode BASE = _grx_stack->back().payload.postfix_expression;
        _grx_stack->pop_back();
        ExpressionNode v;
        {
         v = new MemberAccessExpressionNode(BASE, MEMBER); 
        }
        StackEntryPayload _grx_v = {.postfix_expression = v};
        return _grx_v;
    }
    static StackEntryPayload _reduction29(std::vector<StackEntry>* _grx_stack) {
        ExpressionNode E_INNER = _grx_stack->back().payload.postfix_expression;
        _grx_stack->pop_back();
        ExpressionNode v;
        {
         v = E_INNER; 
        }
        StackEntryPayload _grx_v = {.pow_expression = v};
        return _grx_v;
    }
    static StackEntryPayload _reduction30(std::vector<StackEntry>* _grx_stack) {
        ExpressionNode EXPONENT = _grx_stack->back().payload.pow_expression;
        _grx_stack->pop_back();
        _grx_stack->pop_back();
        ExpressionNode BASE = _grx_stack->back().payload.postfix_expression;
        _grx_stack->pop_back();
        ExpressionNode v;
        {
         v = new PowExpressionNode(BASE, EXPONENT); 
        }
        StackEntryPayload _grx_v = {.pow_expression = v};
        return _grx_v;
    }
    static StackEntryPayload _reduction31(std::vector<StackEntry>* _grx_stack) {
        ExpressionNode E_INNER = _grx_stack->back().payload.pow_expression;
        _grx_stack->pop_back();
        ExpressionNode v;
        {
         v = E_INNER; 
        }
        StackEntryPayload _grx_v = {.unary_expression = v};
        return _grx_v;
    }
    static StackEntryPayload _reduction32(std::vector<StackEntry>* _grx_stack) {
        ExpressionNode BASE = _grx_stack->back().payload.unary_expression;
        _grx_stack->pop_back();
        _grx_stack->pop_back();
        ExpressionNode v;
        {
         v = new UnaryExpressionNode(UnaryExpressionType::NEGATION, BASE); 
        }
        StackEntryPayload _grx_v = {.unary_expression = v};
        return _grx_v;
    }
    static StackEntryPayload _reduction33(std::vector<StackEntry>* _grx_stack) {
        ExpressionNode BASE = _grx_stack->back().payload.unary_expression;
        _grx_stack->pop_back();
        _grx_stack->pop_back();
        ExpressionNode v;
        {
         v = new UnaryExpressionNode(UnaryExpressionType::BITWISE_INVERT, BASE); 
        }
        StackEntryPayload _grx_v = {.unary_expression = v};
        return _grx_v;
    }
    static StackEntryPayload _reduction34(std::vector<StackEntry>* _grx_stack) {
        ExpressionNode BASE = _grx_stack->back().payload.unary_expression;
        _grx_stack->pop_back();
        _grx_stack->pop_back();
        ExpressionNode v;
        {
         v = new UnaryExpressionNode(UnaryExpressionType::INVERT, BASE); 
        }
        StackEntryPayload _grx_v = {.unary_expression = v};
        return _grx_v;
    }
    static StackEntryPayload _reduction35(std::vector<StackEntry>* _grx_stack) {
        ExpressionNode E_INNER = _grx_stack->back().payload.unary_expression;
        _grx_stack->pop_back();
        ExpressionNode v;
        {
         v = E_INNER; 
        }
        StackEntryPayload _grx_v = {.multiplicative_expression = v};
        return _grx_v;
    }
    static StackEntryPayload _reduction36(std::vector<StackEntry>* _grx_stack) {
        ExpressionNode R = _grx_stack->back().payload.unary_expression;
        _grx_stack->pop_back();
        _grx_stack->pop_back();
        ExpressionNode L = _grx_stack->back().payload.multiplicative_expression;
        _grx_stack->pop_back();
        ExpressionNode v;
        {
         v = new BinaryExpressionNode(BinaryExpressionType::MULTIPLICATION, L, R); 
        }
        StackEntryPayload _grx_v = {.multiplicative_expression = v};
        return _grx_v;
    }
    static StackEntryPayload _reduction37(std::vector<StackEntry>* _grx_stack) {
        ExpressionNode R = _grx_stack->back().payload.unary_expression;
        _grx_stack->pop_back();
        _grx_stack->pop_back();
        ExpressionNode L = _grx_stack->back().payload.multiplicative_expression;
        _grx_stack->pop_back();
        ExpressionNode v;
        {
         v = new BinaryExpressionNode(BinaryExpressionType::DIVISION, L, R); 
        }
        StackEntryPayload _grx_v = {.multiplicative_expression = v};
        return _grx_v;
    }
    static StackEntryPayload _reduction38(std::vector<StackEntry>* _grx_stack) {
        ExpressionNode R = _grx_stack->back().payload.unary_expression;
        _grx_stack->pop_back();
        _grx_stack->pop_back();
        ExpressionNode L = _grx_stack->back().payload.multiplicative_expression;
        _grx_stack->pop_back();
        ExpressionNode v;
        {
         v = new BinaryExpressionNode(BinaryExpressionType::REMAINDER, L, R); 
        }
        StackEntryPayload _grx_v = {.multiplicative_expression = v};
        return _grx_v;
    }
    static StackEntryPayload _reduction39(std::vector<StackEntry>* _grx_stack) {
        ExpressionNode E_INNER = _grx_stack->back().payload.multiplicative_expression;
        _grx_stack->pop_back();
        ExpressionNode v;
        {
         v = E_INNER; 
        }
        StackEntryPayload _grx_v = {.additive_expression = v};
        return _grx_v;
    }
    static StackEntryPayload _reduction40(std::vector<StackEntry>* _grx_stack) {
        ExpressionNode R = _grx_stack->back().payload.multiplicative_expression;
        _grx_stack->pop_back();
        _grx_stack->pop_back();
        ExpressionNode L = _grx_stack->back().payload.additive_expression;
        _grx_stack->pop_back();
        ExpressionNode v;
        {
         v = new BinaryExpressionNode(BinaryExpressionType::ADDITION, L, R); 
        }
        StackEntryPayload _grx_v = {.additive_expression = v};
        return _grx_v;
    }
    static StackEntryPayload _reduction41(std::vector<StackEntry>* _grx_stack) {
        ExpressionNode R = _grx_stack->back().payload.multiplicative_expression;
        _grx_stack->pop_back();
        _grx_stack->pop_back();
        ExpressionNode L = _grx_stack->back().payload.additive_expression;
        _grx_stack->pop_back();
        ExpressionNode v;
        {
         v = new BinaryExpressionNode(BinaryExpressionType::SUBTRACTION, L, R); 
        }
        StackEntryPayload _grx_v = {.additive_expression = v};
        return _grx_v;
    }
    static StackEntryPayload _reduction42(std::vector<StackEntry>* _grx_stack) {
        ExpressionNode E_INNER = _grx_stack->back().payload.additive_expression;
        _grx_stack->pop_back();
        ExpressionNode v;
        {
         v = E_INNER; 
        }
        StackEntryPayload _grx_v = {.bitwise_shift_expression = v};
        return _grx_v;
    }
    static StackEntryPayload _reduction43(std::vector<StackEntry>* _grx_stack) {
        ExpressionNode R = _grx_stack->back().payload.additive_expression;
        _grx_stack->pop_back();
        _grx_stack->pop_back();
        ExpressionNode L = _grx_stack->back().payload.bitwise_shift_expression;
        _grx_stack->pop_back();
        ExpressionNode v;
        {
         v = new BinaryExpressionNode(BinaryExpressionType::BITWISE_SHIFT_LEFT, L, R); 
        }
        StackEntryPayload _grx_v = {.bitwise_shift_expression = v};
        return _grx_v;
    }
    static StackEntryPayload _reduction44(std::vector<StackEntry>* _grx_stack) {
        ExpressionNode R = _grx_stack->back().payload.additive_expression;
        _grx_stack->pop_back();
        _grx_stack->pop_back();
        ExpressionNode L = _grx_stack->back().payload.bitwise_shift_expression;
        _grx_stack->pop_back();
        ExpressionNode v;
        {
         v = new BinaryExpressionNode(BinaryExpressionType::BITWISE_SHIFT_RIGHT, L, R); 
        }
        StackEntryPayload _grx_v = {.bitwise_shift_expression = v};
        return _grx_v;
    }
    static StackEntryPayload _reduction45(std::vector<StackEntry>* _grx_stack) {
        ExpressionNode E_INNER = _grx_stack->back().payload.bitwise_shift_expression;
        _grx_stack->pop_back();
        ExpressionNode v;
        {
         v = E_INNER; 
        }
        StackEntryPayload _grx_v = {.comparison_expression = v};
        return _grx_v;
    }
    static StackEntryPayload _reduction46(std::vector<StackEntry>* _grx_stack) {
        ExpressionNode R = _grx_stack->back().payload.bitwise_shift_expression;
        _grx_stack->pop_back();
        _grx_stack->pop_back();
        ExpressionNode L = _grx_stack->back().payload.comparison_expression;
        _grx_stack->pop_back();
        ExpressionNode v;
        {
         v = new BinaryExpressionNode(BinaryExpressionType::LESS_THAN, L, R); 
        }
        StackEntryPayload _grx_v = {.comparison_expression = v};
        return _grx_v;
    }
    static StackEntryPayload _reduction47(std::vector<StackEntry>* _grx_stack) {
        ExpressionNode R = _grx_stack->back().payload.bitwise_shift_expression;
        _grx_stack->pop_back();
        _grx_stack->pop_back();
        ExpressionNode L = _grx_stack->back().payload.comparison_expression;
        _grx_stack->pop_back();
        ExpressionNode v;
        {
         v = new BinaryExpressionNode(BinaryExpressionType::GREATER_THAN, L, R); 
        }
        StackEntryPayload _grx_v = {.comparison_expression = v};
        return _grx_v;
    }
    static StackEntryPayload _reduction48(std::vector<StackEntry>* _grx_stack) {
        ExpressionNode R = _grx_stack->back().payload.bitwise_shift_expression;
        _grx_stack->pop_back();
        _grx_stack->pop_back();
        ExpressionNode L = _grx_stack->back().payload.comparison_expression;
        _grx_stack->pop_back();
        ExpressionNode v;
        {
         v = new BinaryExpressionNode(BinaryExpressionType::LESS_THAN_OR_EQUAL, L, R); 
        }
        StackEntryPayload _grx_v = {.comparison_expression = v};
        return _grx_v;
    }
    static StackEntryPayload _reduction49(std::vector<StackEntry>* _grx_stack) {
        ExpressionNode R = _grx_stack->back().payload.bitwise_shift_expression;
        _grx_stack->pop_back();
        _grx_stack->pop_back();
        ExpressionNode L = _grx_stack->back().payload.comparison_expression;
        _grx_stack->pop_back();
        ExpressionNode v;
        {
         v = new BinaryExpressionNode(BinaryExpressionType::GREATER_THAN_OR_EQUAL, L, R); 
        }
        StackEntryPayload _grx_v = {.comparison_expression = v};
        return _grx_v;
    }
    static StackEntryPayload _reduction50(std::vector<StackEntry>* _grx_stack) {
        ExpressionNode E_INNER = _grx_stack->back().payload.comparison_expression;
        _grx_stack->pop_back();
        ExpressionNode v;
        {
         v = E_INNER; 
        }
        StackEntryPayload _grx_v = {.equality_expression = v};
        return _grx_v;
    }
    static StackEntryPayload _reduction51(std::vector<StackEntry>* _grx_stack) {
        ExpressionNode R = _grx_stack->back().payload.comparison_expression;
        _grx_stack->pop_back();
        _grx_stack->pop_back();
        ExpressionNode L = _grx_stack->back().payload.equality_expression;
        _grx_stack->pop_back();
        ExpressionNode v;
        {
         v = new BinaryExpressionNode(BinaryExpressionType::EQUAL, L, R); 
        }
        StackEntryPayload _grx_v = {.equality_expression = v};
        return _grx_v;
    }
    static StackEntryPayload _reduction52(std::vector<StackEntry>* _grx_stack) {
        ExpressionNode R = _grx_stack->back().payload.comparison_expression;
        _grx_stack->pop_back();
        _grx_stack->pop_back();
        ExpressionNode L = _grx_stack->back().payload.equality_expression;
        _grx_stack->pop_back();
        ExpressionNode v;
        {
         v = new BinaryExpressionNode(BinaryExpressionType::NOT_EQUAL, L, R); 
        }
        StackEntryPayload _grx_v = {.equality_expression = v};
        return _grx_v;
    }
    static StackEntryPayload _reduction53(std::vector<StackEntry>* _grx_stack) {
        ExpressionNode E_INNER = _grx_stack->back().payload.equality_expression;
        _grx_stack->pop_back();
        ExpressionNode v;
        {
         v = E_INNER; 
        }
        StackEntryPayload _grx_v = {.bitwise_and_expression = v};
        return _grx_v;
    }
    static StackEntryPayload _reduction54(std::vector<StackEntry>* _grx_stack) {
        ExpressionNode R = _grx_stack->back().payload.equality_expression;
        _grx_stack->pop_back();
        _grx_stack->pop_back();
        ExpressionNode L = _grx_stack->back().payload.bitwise_and_expression;
        _grx_stack->pop_back();
        ExpressionNode v;
        {
         v = new BinaryExpressionNode(BinaryExpressionType::BITWISE_AND, L, R); 
        }
        StackEntryPayload _grx_v = {.bitwise_and_expression = v};
        return _grx_v;
    }
    static StackEntryPayload _reduction55(std::vector<StackEntry>* _grx_stack) {
        ExpressionNode E_INNER = _grx_stack->back().payload.bitwise_and_expression;
        _grx_stack->pop_back();
        ExpressionNode v;
        {
         v = E_INNER; 
        }
        StackEntryPayload _grx_v = {.bitwise_xor_expression = v};
        return _grx_v;
    }
    static StackEntryPayload _reduction56(std::vector<StackEntry>* _grx_stack) {
        ExpressionNode R = _grx_stack->back().payload.bitwise_and_expression;
        _grx_stack->pop_back();
        _grx_stack->pop_back();
        ExpressionNode L = _grx_stack->back().payload.bitwise_xor_expression;
        _grx_stack->pop_back();
        ExpressionNode v;
        {
         v = new BinaryExpressionNode(BinaryExpressionType::BITWISE_XOR, L, R); 
        }
        StackEntryPayload _grx_v = {.bitwise_xor_expression = v};
        return _grx_v;
    }
    static StackEntryPayload _reduction57(std::vector<StackEntry>* _grx_stack) {
        ExpressionNode E_INNER = _grx_stack->back().payload.bitwise_xor_expression;
        _grx_stack->pop_back();
        ExpressionNode v;
        {
         v = E_INNER; 
        }
        StackEntryPayload _grx_v = {.bitwise_or_expression = v};
        return _grx_v;
    }
    static StackEntryPayload _reduction58(std::vector<StackEntry>* _grx_stack) {
        ExpressionNode R = _grx_stack->back().payload.bitwise_xor_expression;
        _grx_stack->pop_back();
        _grx_stack->pop_back();
        ExpressionNode L = _grx_stack->back().payload.bitwise_or_expression;
        _grx_stack->pop_back();
        ExpressionNode v;
        {
         v = new BinaryExpressionNode(BinaryExpressionType::BITWISE_OR, L, R); 
        }
        StackEntryPayload _grx_v = {.bitwise_or_expression = v};
        return _grx_v;
    }
    static StackEntryPayload _reduction59(std::vector<StackEntry>* _grx_stack) {
        ExpressionNode E_INNER = _grx_stack->back().payload.bitwise_or_expression;
        _grx_stack->pop_back();
        ExpressionNode v;
        {
         v = E_INNER; 
        }
        StackEntryPayload _grx_v = {.and_expression = v};
        return _grx_v;
    }
    static StackEntryPayload _reduction60(std::vector<StackEntry>* _grx_stack) {
        ExpressionNode R = _grx_stack->back().payload.bitwise_or_expression;
        _grx_stack->pop_back();
        _grx_stack->pop_back();
        ExpressionNode L = _grx_stack->back().payload.and_expression;
        _grx_stack->pop_back();
        ExpressionNode v;
        {
         v = new BinaryExpressionNode(BinaryExpressionType::AND, L, R); 
        }
        StackEntryPayload _grx_v = {.and_expression = v};
        return _grx_v;
    }
    static StackEntryPayload _reduction61(std::vector<StackEntry>* _grx_stack) {
        ExpressionNode E_INNER = _grx_stack->back().payload.and_expression;
        _grx_stack->pop_back();
        ExpressionNode v;
        {
         v = E_INNER; 
        }
        StackEntryPayload _grx_v = {.or_expression = v};
        return _grx_v;
    }
    static StackEntryPayload _reduction62(std::vector<StackEntry>* _grx_stack) {
        ExpressionNode R = _grx_stack->back().payload.and_expression;
        _grx_stack->pop_back();
        _grx_stack->pop_back();
        ExpressionNode L = _grx_stack->back().payload.or_expression;
        _grx_stack->pop_back();
        ExpressionNode v;
        {
         v = new BinaryExpressionNode(BinaryExpressionType::OR, L, R); 
        }
        StackEntryPayload _grx_v = {.or_expression = v};
        return _grx_v;
    }
    static StackEntryPayload _reduction63(std::vector<StackEntry>* _grx_stack) {
        ExpressionNode E_INNER = _grx_stack->back().payload.or_expression;
        _grx_stack->pop_back();
        ExpressionNode v;
        {
         v = E_INNER; 
        }
        StackEntryPayload _grx_v = {.ternary_expression = v};
        return _grx_v;
    }
    static StackEntryPayload _reduction64(std::vector<StackEntry>* _grx_stack) {
        ExpressionNode ELSE = _grx_stack->back().payload.ternary_expression;
        _grx_stack->pop_back();
        _grx_stack->pop_back();
        ExpressionNode IF = _grx_stack->back().payload.expression;
        _grx_stack->pop_back();
        _grx_stack->pop_back();
        ExpressionNode COND = _grx_stack->back().payload.or_expression;
        _grx_stack->pop_back();
        ExpressionNode v;
        {
         v = new TernaryExpressionNode(COND, IF, ELSE); 
        }
        StackEntryPayload _grx_v = {.ternary_expression = v};
        return _grx_v;
    }
    static StackEntryPayload _reduction65(std::vector<StackEntry>* _grx_stack) {
        ExpressionNode E_INNER = _grx_stack->back().payload.ternary_expression;
        _grx_stack->pop_back();
        ExpressionNode v;
        {
         v = E_INNER; 
        }
        StackEntryPayload _grx_v = {.expression = v};
        return _grx_v;
    }
    static StackEntryPayload _reduction66(std::vector<StackEntry>* _grx_stack) {
        ExpressionNode R = _grx_stack->back().payload.expression;
        _grx_stack->pop_back();
        _grx_stack->pop_back();
        ExpressionNode L = _grx_stack->back().payload.unary_expression;
        _grx_stack->pop_back();
        ExpressionNode v;
        {
         v = new BinaryExpressionNode(BinaryExpressionType::ASSIGN, L, R); 
        }
        StackEntryPayload _grx_v = {.expression = v};
        return _grx_v;
    }
    static StackEntryPayload _reduction67(std::vector<StackEntry>* _grx_stack) {
        ExpressionNode R = _grx_stack->back().payload.expression;
        _grx_stack->pop_back();
        _grx_stack->pop_back();
        ExpressionNode L = _grx_stack->back().payload.unary_expression;
        _grx_stack->pop_back();
        ExpressionNode v;
        {
         v = new BinaryExpressionNode(BinaryExpressionType::ASSIGN_MULTIPLY, L, R); 
        }
        StackEntryPayload _grx_v = {.expression = v};
        return _grx_v;
    }
    static StackEntryPayload _reduction68(std::vector<StackEntry>* _grx_stack) {
        ExpressionNode R = _grx_stack->back().payload.expression;
        _grx_stack->pop_back();
        _grx_stack->pop_back();
        ExpressionNode L = _grx_stack->back().payload.unary_expression;
        _grx_stack->pop_back();
        ExpressionNode v;
        {
         v = new BinaryExpressionNode(BinaryExpressionType::ASSIGN_DIVIDE, L, R); 
        }
        StackEntryPayload _grx_v = {.expression = v};
        return _grx_v;
    }
    static StackEntryPayload _reduction69(std::vector<StackEntry>* _grx_stack) {
        ExpressionNode R = _grx_stack->back().payload.expression;
        _grx_stack->pop_back();
        _grx_stack->pop_back();
        ExpressionNode L = _grx_stack->back().payload.unary_expression;
        _grx_stack->pop_back();
        ExpressionNode v;
        {
         v = new BinaryExpressionNode(BinaryExpressionType::ASSIGN_REMAINDER, L, R); 
        }
        StackEntryPayload _grx_v = {.expression = v};
        return _grx_v;
    }
    static StackEntryPayload _reduction70(std::vector<StackEntry>* _grx_stack) {
        ExpressionNode R = _grx_stack->back().payload.expression;
        _grx_stack->pop_back();
        _grx_stack->pop_back();
        ExpressionNode L = _grx_stack->back().payload.unary_expression;
        _grx_stack->pop_back();
        ExpressionNode v;
        {
         v = new BinaryExpressionNode(BinaryExpressionType::ASSIGN_PLUS, L, R); 
        }
        StackEntryPayload _grx_v = {.expression = v};
        return _grx_v;
    }
    static StackEntryPayload _reduction71(std::vector<StackEntry>* _grx_stack) {
        ExpressionNode R = _grx_stack->back().payload.expression;
        _grx_stack->pop_back();
        _grx_stack->pop_back();
        ExpressionNode L = _grx_stack->back().payload.unary_expression;
        _grx_stack->pop_back();
        ExpressionNode v;
        {
         v = new BinaryExpressionNode(BinaryExpressionType::ASSIGN_MINUS, L, R); 
        }
        StackEntryPayload _grx_v = {.expression = v};
        return _grx_v;
    }
    static StackEntryPayload _reduction72(std::vector<StackEntry>* _grx_stack) {
        ExpressionNode R = _grx_stack->back().payload.expression;
        _grx_stack->pop_back();
        _grx_stack->pop_back();
        ExpressionNode L = _grx_stack->back().payload.unary_expression;
        _grx_stack->pop_back();
        ExpressionNode v;
        {
         v = new BinaryExpressionNode(BinaryExpressionType::ASSIGN_BITWISE_SHIFT_LEFT, L, R); 
        }
        StackEntryPayload _grx_v = {.expression = v};
        return _grx_v;
    }
    static StackEntryPayload _reduction73(std::vector<StackEntry>* _grx_stack) {
        ExpressionNode R = _grx_stack->back().payload.expression;
        _grx_stack->pop_back();
        _grx_stack->pop_back();
        ExpressionNode L = _grx_stack->back().payload.unary_expression;
        _grx_stack->pop_back();
        ExpressionNode v;
        {
         v = new BinaryExpressionNode(BinaryExpressionType::ASSIGN_BITWISE_SHIFT_RIGHT, L, R); 
        }
        StackEntryPayload _grx_v = {.expression = v};
        return _grx_v;
    }
    static StackEntryPayload _reduction74(std::vector<StackEntry>* _grx_stack) {
        ExpressionNode R = _grx_stack->back().payload.expression;
        _grx_stack->pop_back();
        _grx_stack->pop_back();
        ExpressionNode L = _grx_stack->back().payload.unary_expression;
        _grx_stack->pop_back();
        ExpressionNode v;
        {
         v = new BinaryExpressionNode(BinaryExpressionType::ASSIGN_BITWISE_AND, L, R); 
        }
        StackEntryPayload _grx_v = {.expression = v};
        return _grx_v;
    }
    static StackEntryPayload _reduction75(std::vector<StackEntry>* _grx_stack) {
        ExpressionNode R = _grx_stack->back().payload.expression;
        _grx_stack->pop_back();
        _grx_stack->pop_back();
        ExpressionNode L = _grx_stack->back().payload.unary_expression;
        _grx_stack->pop_back();
        ExpressionNode v;
        {
         v = new BinaryExpressionNode(BinaryExpressionType::ASSIGN_BITWISE_XOR, L, R); 
        }
        StackEntryPayload _grx_v = {.expression = v};
        return _grx_v;
    }
    static StackEntryPayload _reduction76(std::vector<StackEntry>* _grx_stack) {
        ExpressionNode R = _grx_stack->back().payload.expression;
        _grx_stack->pop_back();
        _grx_stack->pop_back();
        ExpressionNode L = _grx_stack->back().payload.unary_expression;
        _grx_stack->pop_back();
        ExpressionNode v;
        {
         v = new BinaryExpressionNode(BinaryExpressionType::ASSIGN_BITWISE_OR, L, R); 
        }
        StackEntryPayload _grx_v = {.expression = v};
        return _grx_v;
    }
    static constexpr StackEntryPayload (*reductions[])(std::vector<StackEntry>*) = {_reduction0, _reduction1, _reduction2, _reduction3, _reduction4, _reduction5, _reduction6, _reduction7, _reduction8, _reduction9, _reduction10, _reduction11, _reduction12, _reduction13, _reduction14, _reduction15, _reduction16, _reduction17, _reduction18, _reduction19, _reduction20, _reduction21, _reduction22, _reduction23, _reduction24, _reduction25, _reduction26, _reduction27, _reduction28, _reduction29, _reduction30, _reduction31, _reduction32, _reduction33, _reduction34, _reduction35, _reduction36, _reduction37, _reduction38, _reduction39, _reduction40, _reduction41, _reduction42, _reduction43, _reduction44, _reduction45, _reduction46, _reduction47, _reduction48, _reduction49, _reduction50, _reduction51, _reduction52, _reduction53, _reduction54, _reduction55, _reduction56, _reduction57, _reduction58, _reduction59, _reduction60, _reduction61, _reduction62, _reduction63, _reduction64, _reduction65, _reduction66, _reduction67, _reduction68, _reduction69, _reduction70, _reduction71, _reduction72, _reduction73, _reduction74, _reduction75, _reduction76};

    std::vector<StackEntry> stack;
    StackEntryPayload payload;
    bool payloadInitialized = false;
public:
    ZeroLampParser() {
        stack.emplace_back();
    }
    void reset() {
        stack.clear();
        stack.emplace_back();
        payloadInitialized = false;
    }
    bool parse(int tokenId, StackEntryPayload tokenPayload) {
        while (true) {
            int action = actionTable[TERMINAL_COUNT * stack.back().previousState + tokenId];
            if (action == 0) {
                return false;
            }
            if (action == -1) {
                payload = stack.back().payload;
                payloadInitialized = true;
                return true;
            }
            if (action > 0) {
                stack.emplace_back(action - 1, tokenPayload);
                return true;
            }
            const int productionIndex = -action - 2;
            const StackEntryPayload reducedProduction = reductions[productionIndex](&stack);
            const StackEntry newState = stack.back();
            const int nextState = gotoTable[newState.previousState * NON_TERMINAL_COUNT + productionLabels[productionIndex]];
            stack.emplace_back(nextState - 1, reducedProduction);
        }
    }
    [[nodiscard]] bool successfullyParsed() const {
        return payloadInitialized;
    }
    [[nodiscard]] StackEntryPayload getValue() const {
        return payload;
    }
};

#endif
