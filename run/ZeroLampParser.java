/* This file was generated by Grammax v1.0.0 */

// test

import java.util.Stack;

public final class ZeroLampParser {
    public static final int T_RIGHT_PARENTHESIS = 0;
    public static final int T_LESS_THAN_OR_EQUALS = 1;
    public static final int T_BITWISE_OR = 2;
    public static final int T_STRING_V = 3;
    public static final int T_FLOAT_V = 4;
    public static final int T_MINUS = 5;
    public static final int T_BITWISE_SHIFT_RIGHT = 6;
    public static final int T_BITWISE_INVERT = 7;
    public static final int T_QUESTION_MARK = 8;
    public static final int T_SEMICOLON = 9;
    public static final int T_GREATER_THAN = 10;
    public static final int T_LEFT_BRACE = 11;
    public static final int T_ASSIGN_BITWISE_SHIFT_RIGHT = 12;
    public static final int T_ID = 13;
    public static final int T_IF = 14;
    public static final int T_ASSIGN_REMAINDER = 15;
    public static final int T_LEFT_BRACKET = 16;
    public static final int T_DOT = 17;
    public static final int T_TRUE = 18;
    public static final int T_ASSIGN_MINUS = 19;
    public static final int T_BITWISE_AND = 20;
    public static final int T_LESS_THAN = 21;
    public static final int T_BITWISE_XOR = 22;
    public static final int T_LEFT_PARENTHESIS = 23;
    public static final int T_AND = 24;
    public static final int T_POW = 25;
    public static final int T_MULTIPLY = 26;
    public static final int T_PLUS = 27;
    public static final int T_ASSIGN_BITWISE_AND = 28;
    public static final int T_ASSIGN_BITWISE_XOR = 29;
    public static final int T_FN = 30;
    public static final int T_ASSIGN = 31;
    public static final int T_INT_V = 32;
    public static final int T_DIVIDE = 33;
    public static final int T_BITWISE_SHIFT_LEFT = 34;
    public static final int T_ASSIGN_BITWISE_SHIFT_LEFT = 35;
    public static final int T_INVERT = 36;
    public static final int T_ASSIGN_BITWISE_OR = 37;
    public static final int T_ON = 38;
    public static final int T_COMMA = 39;
    public static final int T_RIGHT_BRACE = 40;
    public static final int T_OR = 41;
    public static final int T_EQUALS = 42;
    public static final int T_NOT_EQUALS = 43;
    public static final int T_ASSIGN_MULTIPLY = 44;
    public static final int T_COLON = 45;
    public static final int T_RIGHT_BRACKET = 46;
    public static final int T_ASSIGN_PLUS = 47;
    public static final int T_REMAINDER = 48;
    public static final int T_ASSIGN_DIVIDE = 49;
    public static final int T_FALSE = 50;
    public static final int T_GREATER_THAN_OR_EQUALS = 51;
    public static final int T_EOF = 52;
    private static final int terminalCount = 53;
    private static final int nonTerminalCount = 21;
    private static final int[] gotoTable = {
        0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,2,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        20,28,0,32,26,43,36,16,33,27,17,42,24,0,29,0,38,34,19,35,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        20,28,0,32,45,43,36,16,33,27,17,42,24,0,29,0,38,34,19,35,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,
        0,0,49,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,51,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,43,36,0,0,61,0,0,0,0,0,0,0,34,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,43,36,0,0,62,0,0,0,0,0,0,0,34,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        20,79,0,32,0,43,36,16,33,27,17,42,24,0,29,0,38,34,19,35,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,43,36,0,0,87,0,0,0,0,0,0,0,34,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,
        0,0,0,0,0,43,36,0,0,100,0,0,0,0,101,0,38,34,0,35,0,
        0,0,0,0,0,43,36,0,0,100,0,0,0,0,102,0,38,34,0,35,0,
        0,0,0,0,0,43,36,0,0,100,0,0,0,0,103,0,38,34,0,35,0,
        0,0,0,0,0,43,36,0,0,100,0,0,0,0,104,0,38,34,0,35,0,
        20,105,0,32,0,43,36,16,33,27,17,42,24,0,29,0,38,34,19,35,0,
        20,0,0,32,0,43,36,16,33,100,0,0,106,0,29,0,38,34,19,35,0,
        20,0,0,107,0,43,36,16,0,100,0,0,0,0,29,0,38,34,0,35,0,
        0,0,0,0,0,43,36,108,0,100,0,0,0,0,29,0,38,34,0,35,0,
        0,0,0,0,0,43,36,109,0,100,0,0,0,0,29,0,38,34,0,35,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        20,0,0,32,0,43,36,16,110,100,0,0,0,0,29,0,38,34,19,35,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        20,111,0,32,0,43,36,16,33,27,17,42,24,0,29,0,38,34,19,35,0,
        20,112,0,32,0,43,36,16,33,27,17,42,24,0,29,0,38,34,19,35,0,
        20,113,0,32,0,43,36,16,33,27,17,42,24,0,29,0,38,34,19,35,0,
        20,114,0,32,0,43,36,16,33,27,17,42,24,0,29,0,38,34,19,35,0,
        20,115,0,32,0,43,36,16,33,27,17,42,24,0,29,0,38,34,19,35,0,
        20,116,0,32,0,43,36,16,33,27,17,42,24,0,29,0,38,34,19,35,0,
        20,117,0,32,0,43,36,16,33,27,17,42,24,0,29,0,38,34,19,35,0,
        20,118,0,32,0,43,36,16,33,27,17,42,24,0,29,0,38,34,19,35,0,
        20,119,0,32,0,43,36,16,33,27,17,42,24,0,29,0,38,34,19,35,0,
        20,120,0,32,0,43,36,16,33,27,17,42,24,0,29,0,38,34,19,35,0,
        20,121,0,32,0,43,36,16,33,27,17,42,24,0,29,0,38,34,19,35,0,
        20,122,0,32,0,43,36,16,33,27,17,42,24,0,29,0,38,34,19,35,0,
        0,0,0,0,0,43,36,0,0,100,0,0,0,0,0,0,123,34,0,35,0,
        0,0,0,0,0,43,36,0,0,100,0,0,0,0,0,0,124,34,0,35,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        126,0,0,0,0,43,36,16,0,100,0,0,0,0,29,0,38,34,0,35,0,
        20,0,0,32,0,43,36,16,0,100,0,0,0,0,29,0,38,34,127,35,0,
        0,0,0,0,0,43,36,0,0,128,0,0,0,0,0,0,0,34,0,0,0,
        0,0,0,0,0,43,36,0,0,129,0,0,0,0,0,0,0,34,0,0,0,
        0,0,0,0,0,43,36,0,0,130,0,0,0,0,0,0,0,34,0,0,0,
        0,0,0,0,0,43,36,0,0,100,0,0,0,0,0,0,0,34,0,131,0,
        0,0,0,0,0,43,36,0,0,100,0,0,0,0,0,0,0,34,0,132,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        20,28,0,32,133,43,36,16,33,27,17,42,24,0,29,0,38,34,19,35,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,43,36,0,0,0,0,0,0,0,0,0,0,136,0,0,0,
        20,137,0,32,0,43,36,16,33,27,17,42,24,0,29,0,38,34,19,35,0,
        20,138,0,32,0,43,36,16,33,27,17,42,24,0,29,0,38,34,19,35,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,140,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,141,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,147,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,150,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        20,0,0,32,0,43,36,16,33,100,17,151,24,0,29,0,38,34,19,35,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    private static final int[] actionTable = {
        0,0,0,0,0,0,0,0,0,0,0,0,0,-7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-7,0,0,0,0,0,0,0,-7,0,-7,0,0,0,0,0,0,0,0,0,0,0,-7,
        0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,-2,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,
        0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,-8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-8,0,0,0,0,0,0,0,-8,0,-8,0,0,0,0,0,0,0,0,0,0,0,-8,
        0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        37,0,0,30,18,23,0,21,0,0,0,0,0,22,0,0,0,0,41,0,0,0,0,31,0,0,0,0,0,0,0,0,40,0,0,0,39,0,0,0,0,0,0,0,0,0,0,0,0,0,25,0,0,
        0,0,0,0,0,0,0,0,0,44,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        46,0,0,30,18,23,0,21,0,0,0,0,0,22,0,0,0,0,41,0,0,0,0,31,0,0,0,0,0,0,0,0,40,0,0,0,39,0,0,0,0,0,0,0,0,0,0,0,0,0,25,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,-7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-7,0,0,0,0,0,0,0,-7,0,-7,0,0,0,0,0,0,0,0,0,0,0,-7,
        48,0,0,0,0,0,0,0,0,0,0,0,0,50,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,-7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-7,0,0,0,0,0,0,0,-7,0,-7,0,0,0,0,0,0,0,0,0,0,0,-7,
        -52,55,-52,0,0,0,0,0,-52,0,53,0,0,-52,0,0,0,0,0,0,-52,52,-52,0,-52,0,0,0,0,0,-52,0,0,0,0,0,0,0,-52,-52,-52,-52,-52,-52,0,-52,-52,0,0,0,0,54,-52,
        -65,0,0,0,0,0,0,0,56,0,0,0,0,-65,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-65,0,0,0,0,0,0,0,-65,-65,-65,57,0,0,0,-65,-65,0,0,0,0,0,-65,
        -21,-21,-21,0,0,-21,-21,0,-21,0,-21,0,-21,-21,0,-21,-21,-21,0,-21,-21,-21,-21,-21,-21,-21,-21,-21,-21,-21,-21,-21,0,-21,-21,-21,0,-21,-21,-21,-21,-21,-21,-21,-21,-21,-21,-21,-21,-21,0,-21,-21,
        -59,0,-59,0,0,0,0,0,-59,0,0,0,0,-59,0,0,0,0,0,0,0,0,58,0,-59,0,0,0,0,0,-59,0,0,0,0,0,0,0,-59,-59,-59,-59,0,0,0,-59,-59,0,0,0,0,0,-59,
        -55,0,-55,0,0,0,0,0,-55,0,0,0,0,-55,0,0,0,0,0,0,-55,0,-55,0,-55,0,0,0,0,0,-55,0,0,0,0,0,0,0,-55,-55,-55,-55,59,60,0,-55,-55,0,0,0,0,0,-55,
        0,0,0,30,18,23,0,21,0,0,0,0,0,22,0,0,0,0,41,0,0,0,0,31,0,0,0,0,0,0,0,0,40,0,0,0,39,0,0,0,0,0,0,0,0,0,0,0,0,0,25,0,0,
        -19,-19,-19,0,0,-19,-19,0,-19,0,-19,0,-19,-19,0,-19,-19,-19,0,-19,-19,-19,-19,-19,-19,-19,-19,-19,-19,-19,-19,-19,0,-19,-19,-19,0,-19,-19,-19,-19,-19,-19,-19,-19,-19,-19,-19,-19,-19,0,-19,-19,
        0,0,0,30,18,23,0,21,0,0,0,0,0,22,0,0,0,0,41,0,0,0,0,31,0,0,0,0,0,0,0,0,40,0,0,0,39,0,0,0,0,0,0,0,0,0,0,0,0,0,25,0,0,
        -63,0,0,0,0,0,0,0,-63,0,0,0,0,-63,0,0,0,0,0,0,0,0,0,0,63,0,0,0,0,0,-63,0,0,0,0,0,0,0,-63,-63,-63,-63,0,0,0,-63,-63,0,0,0,0,0,-63,
        -24,-24,-24,0,0,-24,-24,0,-24,0,-24,0,-24,-24,0,-24,-24,-24,0,-24,-24,-24,-24,-24,-24,-24,-24,-24,-24,-24,-24,-24,0,-24,-24,-24,0,-24,-24,-24,-24,-24,-24,-24,-24,-24,-24,-24,-24,-24,0,-24,-24,
        64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,0,0,0,0,0,0,0,0,0,0,0,0,0,
        -37,-37,-37,0,0,-37,-37,0,-37,0,-37,0,71,-37,0,70,0,0,0,74,-37,-37,-37,0,-37,0,-37,-37,75,67,-37,69,0,-37,-37,73,0,68,-37,-37,-37,-37,-37,-37,72,-37,-37,76,-37,66,0,-37,-37,
        -5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-5,0,0,0,0,0,0,0,0,0,0,0,0,0,
        -47,-47,-47,0,0,0,77,0,-47,0,-47,0,0,-47,0,0,0,0,0,0,-47,-47,-47,0,-47,0,0,0,0,0,-47,0,0,0,78,0,0,0,-47,-47,-47,-47,-47,-47,0,-47,-47,0,0,0,0,-47,-47,
        -22,-22,-22,0,0,-22,-22,0,-22,0,-22,0,-22,-22,0,-22,-22,-22,0,-22,-22,-22,-22,-22,-22,-22,-22,-22,-22,-22,-22,-22,0,-22,-22,-22,0,-22,-22,-22,-22,-22,-22,-22,-22,-22,-22,-22,-22,-22,0,-22,-22,
        0,0,0,30,18,23,0,21,0,0,0,0,0,22,0,0,0,0,41,0,0,0,0,31,0,0,0,0,0,0,0,0,40,0,0,0,39,0,0,0,0,0,0,0,0,0,0,0,0,0,25,0,0,
        -57,0,-57,0,0,0,0,0,-57,0,0,0,0,-57,0,0,0,0,0,0,80,0,-57,0,-57,0,0,0,0,0,-57,0,0,0,0,0,0,0,-57,-57,-57,-57,0,0,0,-57,-57,0,0,0,0,0,-57,
        -61,0,81,0,0,0,0,0,-61,0,0,0,0,-61,0,0,0,0,0,0,0,0,0,0,-61,0,0,0,0,0,-61,0,0,0,0,0,0,0,-61,-61,-61,-61,0,0,0,-61,-61,0,0,0,0,0,-61,
        -33,-33,-33,0,0,-33,-33,0,-33,0,-33,0,-33,-33,0,-33,0,0,0,-33,-33,-33,-33,0,-33,0,-33,-33,-33,-33,-33,-33,0,-33,-33,-33,0,-33,-33,-33,-33,-33,-33,-33,-33,-33,-33,-33,-33,-33,0,-33,-33,
        -41,-41,-41,0,0,-41,-41,0,-41,0,-41,0,0,-41,0,0,0,0,0,0,-41,-41,-41,0,-41,0,83,-41,0,0,-41,0,0,84,-41,0,0,0,-41,-41,-41,-41,-41,-41,0,-41,-41,0,82,0,0,-41,-41,
        -26,-26,-26,0,0,-26,-26,0,-26,0,-26,0,-26,-26,0,-26,-26,-26,0,-26,-26,-26,-26,-26,-26,-26,-26,-26,-26,-26,-26,-26,0,-26,-26,-26,0,-26,-26,-26,-26,-26,-26,-26,-26,-26,-26,-26,-26,-26,0,-26,-26,
        0,0,0,0,0,0,0,0,0,0,0,0,0,-15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-15,0,0,0,0,0,0,0,-15,0,-15,0,0,0,0,0,0,0,0,0,0,0,-15,
        -44,-44,-44,0,0,85,-44,0,-44,0,-44,0,0,-44,0,0,0,0,0,0,-44,-44,-44,0,-44,0,0,86,0,0,-44,0,0,0,-44,0,0,0,-44,-44,-44,-44,-44,-44,0,-44,-44,0,0,0,0,-44,-44,
        0,0,0,30,18,23,0,21,0,0,0,0,0,22,0,0,0,0,41,0,0,0,0,31,0,0,0,0,0,0,0,0,40,0,0,0,39,0,0,0,0,0,0,0,0,0,0,0,0,0,25,0,0,
        -20,-20,-20,0,0,-20,-20,0,-20,0,-20,0,-20,-20,0,-20,-20,-20,0,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,0,-20,-20,-20,0,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,0,-20,-20,
        -23,-23,-23,0,0,-23,-23,0,-23,0,-23,0,-23,-23,0,-23,-23,-23,0,-23,-23,-23,-23,-23,-23,-23,-23,-23,-23,-23,-23,-23,0,-23,-23,-23,0,-23,-23,-23,-23,-23,-23,-23,-23,-23,-23,-23,-23,-23,0,-23,-23,
        -67,0,0,0,0,0,0,0,0,0,0,0,0,-67,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-67,0,0,0,0,0,0,0,-67,-67,-67,0,0,0,0,-67,-67,0,0,0,0,0,-67,
        -31,-31,-31,0,0,-31,-31,0,-31,0,-31,0,-31,-31,0,-31,91,89,0,-31,-31,-31,-31,88,-31,90,-31,-31,-31,-31,-31,-31,0,-31,-31,-31,0,-31,-31,-31,-31,-31,-31,-31,-31,-31,-31,-31,-31,-31,0,-31,-31,
        0,0,0,0,0,0,0,0,0,0,0,0,0,-17,92,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-17,0,0,0,0,0,0,0,-17,0,-17,0,0,0,0,0,0,0,0,0,0,0,-17,
        93,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,94,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,4,0,95,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,96,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        97,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,98,0,0,0,0,0,0,0,0,0,0,0,0,0,
        -3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-3,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,4,0,99,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,30,18,23,0,21,0,0,0,0,0,22,0,0,0,0,41,0,0,0,0,31,0,0,0,0,0,0,0,0,40,0,0,0,39,0,0,0,0,0,0,0,0,0,0,0,0,0,25,0,0,
        0,0,0,30,18,23,0,21,0,0,0,0,0,22,0,0,0,0,41,0,0,0,0,31,0,0,0,0,0,0,0,0,40,0,0,0,39,0,0,0,0,0,0,0,0,0,0,0,0,0,25,0,0,
        0,0,0,30,18,23,0,21,0,0,0,0,0,22,0,0,0,0,41,0,0,0,0,31,0,0,0,0,0,0,0,0,40,0,0,0,39,0,0,0,0,0,0,0,0,0,0,0,0,0,25,0,0,
        0,0,0,30,18,23,0,21,0,0,0,0,0,22,0,0,0,0,41,0,0,0,0,31,0,0,0,0,0,0,0,0,40,0,0,0,39,0,0,0,0,0,0,0,0,0,0,0,0,0,25,0,0,
        0,0,0,30,18,23,0,21,0,0,0,0,0,22,0,0,0,0,41,0,0,0,0,31,0,0,0,0,0,0,0,0,40,0,0,0,39,0,0,0,0,0,0,0,0,0,0,0,0,0,25,0,0,
        0,0,0,30,18,23,0,21,0,0,0,0,0,22,0,0,0,0,41,0,0,0,0,31,0,0,0,0,0,0,0,0,40,0,0,0,39,0,0,0,0,0,0,0,0,0,0,0,0,0,25,0,0,
        0,0,0,30,18,23,0,21,0,0,0,0,0,22,0,0,0,0,41,0,0,0,0,31,0,0,0,0,0,0,0,0,40,0,0,0,39,0,0,0,0,0,0,0,0,0,0,0,0,0,25,0,0,
        0,0,0,30,18,23,0,21,0,0,0,0,0,22,0,0,0,0,41,0,0,0,0,31,0,0,0,0,0,0,0,0,40,0,0,0,39,0,0,0,0,0,0,0,0,0,0,0,0,0,25,0,0,
        0,0,0,30,18,23,0,21,0,0,0,0,0,22,0,0,0,0,41,0,0,0,0,31,0,0,0,0,0,0,0,0,40,0,0,0,39,0,0,0,0,0,0,0,0,0,0,0,0,0,25,0,0,
        -35,-35,-35,0,0,-35,-35,0,-35,0,-35,0,-35,-35,0,-35,0,0,0,-35,-35,-35,-35,0,-35,0,-35,-35,-35,-35,-35,-35,0,-35,-35,-35,0,-35,-35,-35,-35,-35,-35,-35,-35,-35,-35,-35,-35,-35,0,-35,-35,
        -34,-34,-34,0,0,-34,-34,0,-34,0,-34,0,-34,-34,0,-34,0,0,0,-34,-34,-34,-34,0,-34,0,-34,-34,-34,-34,-34,-34,0,-34,-34,-34,0,-34,-34,-34,-34,-34,-34,-34,-34,-34,-34,-34,-34,-34,0,-34,-34,
        0,0,0,30,18,23,0,21,0,0,0,0,0,22,0,0,0,0,41,0,0,0,0,31,0,0,0,0,0,0,0,0,40,0,0,0,39,0,0,0,0,0,0,0,0,0,0,0,0,0,25,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,-16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-16,0,0,0,0,0,0,0,-16,0,-16,0,0,0,0,0,0,0,0,0,0,0,-16,
        0,0,0,30,18,23,0,21,0,0,0,0,0,22,0,0,0,0,41,0,0,0,0,31,0,0,0,0,0,0,0,0,40,0,0,0,39,0,0,0,0,0,0,0,0,0,0,0,0,0,25,0,0,
        0,0,0,30,18,23,0,21,0,0,0,0,0,22,0,0,0,0,41,0,0,0,0,31,0,0,0,0,0,0,0,0,40,0,0,0,39,0,0,0,0,0,0,0,0,0,0,0,0,0,25,0,0,
        0,0,0,30,18,23,0,21,0,0,0,0,0,22,0,0,0,0,41,0,0,0,0,31,0,0,0,0,0,0,0,0,40,0,0,0,39,0,0,0,0,0,0,0,0,0,0,0,0,0,25,0,0,
        0,0,0,30,18,23,0,21,0,0,0,0,0,22,0,0,0,0,41,0,0,0,0,31,0,0,0,0,0,0,0,0,40,0,0,0,39,0,0,0,0,0,0,0,0,0,0,0,0,0,25,0,0,
        0,0,0,30,18,23,0,21,0,0,0,0,0,22,0,0,0,0,41,0,0,0,0,31,0,0,0,0,0,0,0,0,40,0,0,0,39,0,0,0,0,0,0,0,0,0,0,0,0,0,25,0,0,
        0,0,0,30,18,23,0,21,0,0,0,0,0,22,0,0,0,0,41,0,0,0,0,31,0,0,0,0,0,0,0,0,40,0,0,0,39,0,0,0,0,0,0,0,0,0,0,0,0,0,25,0,0,
        0,0,0,30,18,23,0,21,0,0,0,0,0,22,0,0,0,0,41,0,0,0,0,31,0,0,0,0,0,0,0,0,40,0,0,0,39,0,0,0,0,0,0,0,0,0,0,0,0,0,25,0,0,
        0,0,0,30,18,23,0,21,0,0,0,0,0,22,0,0,0,0,41,0,0,0,0,31,0,0,0,0,0,0,0,0,40,0,0,0,39,0,0,0,0,0,0,0,0,0,0,0,0,0,25,0,0,
        0,0,0,30,18,23,0,21,0,0,0,0,0,22,0,0,0,0,41,0,0,0,0,31,0,0,0,0,0,0,0,0,40,0,0,0,39,0,0,0,0,0,0,0,0,0,0,0,0,0,25,0,0,
        0,0,0,30,18,23,0,21,0,0,0,0,0,22,0,0,0,0,41,0,0,0,0,31,0,0,0,0,0,0,0,0,40,0,0,0,39,0,0,0,0,0,0,0,0,0,0,0,0,0,25,0,0,
        0,0,0,30,18,23,0,21,0,0,0,0,0,22,0,0,0,0,41,0,0,0,0,31,0,0,0,0,0,0,0,0,40,0,0,0,39,0,0,0,0,0,0,0,0,0,0,0,0,0,25,0,0,
        0,0,0,30,18,23,0,21,0,0,0,0,0,22,0,0,0,0,41,0,0,0,0,31,0,0,0,0,0,0,0,0,40,0,0,0,39,0,0,0,0,0,0,0,0,0,0,0,0,0,25,0,0,
        0,0,0,30,18,23,0,21,0,0,0,0,0,22,0,0,0,0,41,0,0,0,0,31,0,0,0,0,0,0,0,0,40,0,0,0,39,0,0,0,0,0,0,0,0,0,0,0,0,0,25,0,0,
        0,0,0,30,18,23,0,21,0,0,0,0,0,22,0,0,0,0,41,0,0,0,0,31,0,0,0,0,0,0,0,0,40,0,0,0,39,0,0,0,0,0,0,0,0,0,0,0,0,0,25,0,0,
        125,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,30,18,23,0,21,0,0,0,0,0,22,0,0,0,0,41,0,0,0,0,31,0,0,0,0,0,0,0,0,40,0,0,0,39,0,0,0,0,0,0,0,0,0,0,0,0,0,25,0,0,
        0,0,0,30,18,23,0,21,0,0,0,0,0,22,0,0,0,0,41,0,0,0,0,31,0,0,0,0,0,0,0,0,40,0,0,0,39,0,0,0,0,0,0,0,0,0,0,0,0,0,25,0,0,
        0,0,0,30,18,23,0,21,0,0,0,0,0,22,0,0,0,0,41,0,0,0,0,31,0,0,0,0,0,0,0,0,40,0,0,0,39,0,0,0,0,0,0,0,0,0,0,0,0,0,25,0,0,
        0,0,0,30,18,23,0,21,0,0,0,0,0,22,0,0,0,0,41,0,0,0,0,31,0,0,0,0,0,0,0,0,40,0,0,0,39,0,0,0,0,0,0,0,0,0,0,0,0,0,25,0,0,
        0,0,0,30,18,23,0,21,0,0,0,0,0,22,0,0,0,0,41,0,0,0,0,31,0,0,0,0,0,0,0,0,40,0,0,0,39,0,0,0,0,0,0,0,0,0,0,0,0,0,25,0,0,
        0,0,0,30,18,23,0,21,0,0,0,0,0,22,0,0,0,0,41,0,0,0,0,31,0,0,0,0,0,0,0,0,40,0,0,0,39,0,0,0,0,0,0,0,0,0,0,0,0,0,25,0,0,
        0,0,0,30,18,23,0,21,0,0,0,0,0,22,0,0,0,0,41,0,0,0,0,31,0,0,0,0,0,0,0,0,40,0,0,0,39,0,0,0,0,0,0,0,0,0,0,0,0,0,25,0,0,
        -36,-36,-36,0,0,-36,-36,0,-36,0,-36,0,-36,-36,0,-36,0,0,0,-36,-36,-36,-36,0,-36,0,-36,-36,-36,-36,-36,-36,0,-36,-36,-36,0,-36,-36,-36,-36,-36,-36,-36,-36,-36,-36,-36,-36,-36,0,-36,-36,
        134,0,0,30,18,23,0,21,0,0,0,0,0,22,0,0,0,0,41,0,0,0,0,31,0,0,0,0,0,0,0,0,40,0,0,0,39,0,0,0,0,0,0,0,0,0,0,0,0,0,25,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,135,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,30,18,0,0,0,0,0,0,0,0,22,0,0,0,0,41,0,0,0,0,31,0,0,0,0,0,0,0,0,40,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,25,0,0,
        0,0,0,30,18,23,0,21,0,0,0,0,0,22,0,0,0,0,41,0,0,0,0,31,0,0,0,0,0,0,0,0,40,0,0,0,39,0,0,0,0,0,0,0,0,0,0,0,0,0,25,0,0,
        0,0,0,30,18,23,0,21,0,0,0,0,0,22,0,0,0,0,41,0,0,0,0,31,0,0,0,0,0,0,0,0,40,0,0,0,39,0,0,0,0,0,0,0,0,0,0,0,0,0,25,0,0,
        0,0,0,0,0,0,0,0,0,0,0,139,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,-7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-7,0,0,0,0,0,0,0,-7,0,-7,0,0,0,0,0,0,0,0,0,0,0,-7,
        0,0,0,0,0,0,0,0,0,0,0,0,0,-12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-12,0,0,0,0,0,0,0,-12,0,-12,0,0,0,0,0,0,0,0,0,0,0,-12,
        0,0,0,0,0,0,0,0,0,0,0,0,0,-7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-7,0,0,0,0,0,0,0,-7,0,-7,0,0,0,0,0,0,0,0,0,0,0,-7,
        0,0,0,0,0,0,0,0,0,0,0,142,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,143,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,-9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-9,0,0,0,0,0,0,0,-9,0,-9,0,0,0,0,0,0,0,0,0,0,0,-9,
        -37,-37,-37,0,0,-37,-37,0,-37,0,-37,0,0,-37,0,0,0,0,0,0,-37,-37,-37,0,-37,0,-37,-37,0,0,-37,0,0,-37,-37,0,0,0,-37,-37,-37,-37,-37,-37,0,-37,-37,0,-37,0,0,-37,-37,
        -48,-48,-48,0,0,0,77,0,-48,0,-48,0,0,-48,0,0,0,0,0,0,-48,-48,-48,0,-48,0,0,0,0,0,-48,0,0,0,78,0,0,0,-48,-48,-48,-48,-48,-48,0,-48,-48,0,0,0,0,-48,-48,
        -49,-49,-49,0,0,0,77,0,-49,0,-49,0,0,-49,0,0,0,0,0,0,-49,-49,-49,0,-49,0,0,0,0,0,-49,0,0,0,78,0,0,0,-49,-49,-49,-49,-49,-49,0,-49,-49,0,0,0,0,-49,-49,
        -51,-51,-51,0,0,0,77,0,-51,0,-51,0,0,-51,0,0,0,0,0,0,-51,-51,-51,0,-51,0,0,0,0,0,-51,0,0,0,78,0,0,0,-51,-51,-51,-51,-51,-51,0,-51,-51,0,0,0,0,-51,-51,
        -50,-50,-50,0,0,0,77,0,-50,0,-50,0,0,-50,0,0,0,0,0,0,-50,-50,-50,0,-50,0,0,0,0,0,-50,0,0,0,78,0,0,0,-50,-50,-50,-50,-50,-50,0,-50,-50,0,0,0,0,-50,-50,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,144,0,0,0,0,0,0,0,
        -64,0,0,0,0,0,0,0,-64,0,0,0,0,-64,0,0,0,0,0,0,0,0,0,0,63,0,0,0,0,0,-64,0,0,0,0,0,0,0,-64,-64,-64,-64,0,0,0,-64,-64,0,0,0,0,0,-64,
        -58,0,-58,0,0,0,0,0,-58,0,0,0,0,-58,0,0,0,0,0,0,80,0,-58,0,-58,0,0,0,0,0,-58,0,0,0,0,0,0,0,-58,-58,-58,-58,0,0,0,-58,-58,0,0,0,0,0,-58,
        -53,55,-53,0,0,0,0,0,-53,0,53,0,0,-53,0,0,0,0,0,0,-53,52,-53,0,-53,0,0,0,0,0,-53,0,0,0,0,0,0,0,-53,-53,-53,-53,-53,-53,0,-53,-53,0,0,0,0,54,-53,
        -54,55,-54,0,0,0,0,0,-54,0,53,0,0,-54,0,0,0,0,0,0,-54,52,-54,0,-54,0,0,0,0,0,-54,0,0,0,0,0,0,0,-54,-54,-54,-54,-54,-54,0,-54,-54,0,0,0,0,54,-54,
        -62,0,81,0,0,0,0,0,-62,0,0,0,0,-62,0,0,0,0,0,0,0,0,0,0,-62,0,0,0,0,0,-62,0,0,0,0,0,0,0,-62,-62,-62,-62,0,0,0,-62,-62,0,0,0,0,0,-62,
        -6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-6,0,0,0,0,0,0,0,0,0,0,0,0,0,
        -70,0,0,0,0,0,0,0,0,0,0,0,0,-70,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-70,0,0,0,0,0,0,0,-70,-70,-70,0,0,0,0,-70,-70,0,0,0,0,0,-70,
        -77,0,0,0,0,0,0,0,0,0,0,0,0,-77,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-77,0,0,0,0,0,0,0,-77,-77,-77,0,0,0,0,-77,-77,0,0,0,0,0,-77,
        -78,0,0,0,0,0,0,0,0,0,0,0,0,-78,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-78,0,0,0,0,0,0,0,-78,-78,-78,0,0,0,0,-78,-78,0,0,0,0,0,-78,
        -68,0,0,0,0,0,0,0,0,0,0,0,0,-68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-68,0,0,0,0,0,0,0,-68,-68,-68,0,0,0,0,-68,-68,0,0,0,0,0,-68,
        -71,0,0,0,0,0,0,0,0,0,0,0,0,-71,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-71,0,0,0,0,0,0,0,-71,-71,-71,0,0,0,0,-71,-71,0,0,0,0,0,-71,
        -75,0,0,0,0,0,0,0,0,0,0,0,0,-75,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-75,0,0,0,0,0,0,0,-75,-75,-75,0,0,0,0,-75,-75,0,0,0,0,0,-75,
        -69,0,0,0,0,0,0,0,0,0,0,0,0,-69,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-69,0,0,0,0,0,0,0,-69,-69,-69,0,0,0,0,-69,-69,0,0,0,0,0,-69,
        -74,0,0,0,0,0,0,0,0,0,0,0,0,-74,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-74,0,0,0,0,0,0,0,-74,-74,-74,0,0,0,0,-74,-74,0,0,0,0,0,-74,
        -73,0,0,0,0,0,0,0,0,0,0,0,0,-73,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-73,0,0,0,0,0,0,0,-73,-73,-73,0,0,0,0,-73,-73,0,0,0,0,0,-73,
        -76,0,0,0,0,0,0,0,0,0,0,0,0,-76,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-76,0,0,0,0,0,0,0,-76,-76,-76,0,0,0,0,-76,-76,0,0,0,0,0,-76,
        -72,0,0,0,0,0,0,0,0,0,0,0,0,-72,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-72,0,0,0,0,0,0,0,-72,-72,-72,0,0,0,0,-72,-72,0,0,0,0,0,-72,
        -46,-46,-46,0,0,85,-46,0,-46,0,-46,0,0,-46,0,0,0,0,0,0,-46,-46,-46,0,-46,0,0,86,0,0,-46,0,0,0,-46,0,0,0,-46,-46,-46,-46,-46,-46,0,-46,-46,0,0,0,0,-46,-46,
        -45,-45,-45,0,0,85,-45,0,-45,0,-45,0,0,-45,0,0,0,0,0,0,-45,-45,-45,0,-45,0,0,86,0,0,-45,0,0,0,-45,0,0,0,-45,-45,-45,-45,-45,-45,0,-45,-45,0,0,0,0,-45,-45,
        -25,-25,-25,0,0,-25,-25,0,-25,0,-25,0,-25,-25,0,-25,-25,-25,0,-25,-25,-25,-25,-25,-25,-25,-25,-25,-25,-25,-25,-25,0,-25,-25,-25,0,-25,-25,-25,-25,-25,-25,-25,-25,-25,-25,-25,-25,-25,0,-25,-25,
        -56,0,-56,0,0,0,0,0,-56,0,0,0,0,-56,0,0,0,0,0,0,-56,0,-56,0,-56,0,0,0,0,0,-56,0,0,0,0,0,0,0,-56,-56,-56,-56,59,60,0,-56,-56,0,0,0,0,0,-56,
        -60,0,-60,0,0,0,0,0,-60,0,0,0,0,-60,0,0,0,0,0,0,0,0,58,0,-60,0,0,0,0,0,-60,0,0,0,0,0,0,0,-60,-60,-60,-60,0,0,0,-60,-60,0,0,0,0,0,-60,
        -40,-40,-40,0,0,-40,-40,0,-40,0,-40,0,0,-40,0,0,0,0,0,0,-40,-40,-40,0,-40,0,-40,-40,0,0,-40,0,0,-40,-40,0,0,0,-40,-40,-40,-40,-40,-40,0,-40,-40,0,-40,0,0,-40,-40,
        -38,-38,-38,0,0,-38,-38,0,-38,0,-38,0,0,-38,0,0,0,0,0,0,-38,-38,-38,0,-38,0,-38,-38,0,0,-38,0,0,-38,-38,0,0,0,-38,-38,-38,-38,-38,-38,0,-38,-38,0,-38,0,0,-38,-38,
        -39,-39,-39,0,0,-39,-39,0,-39,0,-39,0,0,-39,0,0,0,0,0,0,-39,-39,-39,0,-39,0,-39,-39,0,0,-39,0,0,-39,-39,0,0,0,-39,-39,-39,-39,-39,-39,0,-39,-39,0,-39,0,0,-39,-39,
        -43,-43,-43,0,0,-43,-43,0,-43,0,-43,0,0,-43,0,0,0,0,0,0,-43,-43,-43,0,-43,0,83,-43,0,0,-43,0,0,84,-43,0,0,0,-43,-43,-43,-43,-43,-43,0,-43,-43,0,82,0,0,-43,-43,
        -42,-42,-42,0,0,-42,-42,0,-42,0,-42,0,0,-42,0,0,0,0,0,0,-42,-42,-42,0,-42,0,83,-42,0,0,-42,0,0,84,-42,0,0,0,-42,-42,-42,-42,-42,-42,0,-42,-42,0,82,0,0,-42,-42,
        145,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,0,0,0,0,0,0,0,0,0,0,0,0,0,
        -28,-28,-28,0,0,-28,-28,0,-28,0,-28,0,-28,-28,0,-28,-28,-28,0,-28,-28,-28,-28,-28,-28,-28,-28,-28,-28,-28,-28,-28,0,-28,-28,-28,0,-28,-28,-28,-28,-28,-28,-28,-28,-28,-28,-28,-28,-28,0,-28,-28,
        -30,-30,-30,0,0,-30,-30,0,-30,0,-30,0,-30,-30,0,-30,-30,-30,0,-30,-30,-30,-30,-30,-30,-30,-30,-30,-30,-30,-30,-30,0,-30,-30,-30,0,-30,-30,-30,-30,-30,-30,-30,-30,-30,-30,-30,-30,-30,0,-30,-30,
        -32,-32,-32,0,0,-32,-32,0,-32,0,-32,0,-32,-32,0,-32,0,0,0,-32,-32,-32,-32,0,-32,0,-32,-32,-32,-32,-32,-32,0,-32,-32,-32,0,-32,-32,-32,-32,-32,-32,-32,-32,-32,-32,-32,-32,-32,0,-32,-32,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,146,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,-18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-18,0,0,0,0,0,0,0,-18,0,-18,0,0,0,0,0,0,0,0,0,0,0,-18,
        0,0,0,0,0,0,0,0,0,0,0,0,0,-7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-7,0,0,0,0,0,0,0,-7,0,-7,0,0,0,0,0,0,0,0,0,0,0,-7,
        0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,4,0,148,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,4,0,149,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,-7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-7,0,0,0,0,0,0,0,-7,0,-7,0,0,0,0,0,0,0,0,0,0,0,-7,
        -4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-4,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,30,18,23,0,21,0,0,0,0,0,22,0,0,0,0,41,0,0,0,0,31,0,0,0,0,0,0,0,0,40,0,0,0,39,0,0,0,0,0,0,0,0,0,0,0,0,0,25,0,0,
        -29,-29,-29,0,0,-29,-29,0,-29,0,-29,0,-29,-29,0,-29,-29,-29,0,-29,-29,-29,-29,-29,-29,-29,-29,-29,-29,-29,-29,-29,0,-29,-29,-29,0,-29,-29,-29,-29,-29,-29,-29,-29,-29,-29,-29,-29,-29,0,-29,-29,
        -27,-27,-27,0,0,-27,-27,0,-27,0,-27,0,-27,-27,0,-27,-27,-27,0,-27,-27,-27,-27,-27,-27,-27,-27,-27,-27,-27,-27,-27,0,-27,-27,-27,0,-27,-27,-27,-27,-27,-27,-27,-27,-27,-27,-27,-27,-27,0,-27,-27,
        0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,4,0,152,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,-13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-13,0,0,0,0,0,0,0,-13,0,-13,0,0,0,0,0,0,0,0,0,0,0,-13,
        0,0,0,0,0,0,0,0,0,0,0,0,0,-10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-10,0,0,0,0,0,0,0,-10,0,-10,0,0,0,0,0,0,0,0,0,0,0,-10,
        0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,4,0,153,0,0,0,0,0,0,0,0,0,0,0,0,
        -66,0,0,0,0,0,0,0,0,0,0,0,0,-66,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-66,0,0,0,0,0,0,0,-66,-66,-66,0,0,0,0,-66,-66,0,0,0,0,0,-66,
        0,0,0,0,0,0,0,0,0,0,0,0,0,-14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-14,0,0,0,0,0,0,0,-14,0,-14,0,0,0,0,0,0,0,0,0,0,0,-14,
        0,0,0,0,0,0,0,0,0,0,0,0,0,-11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-11,0,0,0,0,0,0,0,-11,0,-11,0,0,0,0,0,0,0,0,0,0,0,-11};
    private static final int[] productionLabels = {13,2,2,4,4,20,20,15,15,15,15,15,15,15,15,15,15,6,6,6,6,6,6,6,5,5,5,5,5,17,17,9,9,9,9,19,19,19,19,16,16,16,14,14,14,7,7,7,7,7,0,0,0,3,3,18,18,8,8,12,12,10,10,11,11,1,1,1,1,1,1,1,1,1,1,1,1};
    @SuppressWarnings("Convert2Lambda")
    private static final Reductor[] reductions = {
        new Reductor() {
            @Override
            public Object reduce(Stack<StackEntry> _grx_stack) {
                Vector_StatementNode SL = (Vector_StatementNode)_grx_stack.pop().payload;
                Object v;
                {
                 v = new RootNode(std::move(SL)); 
                }
                return v;
            }
        },
        new Reductor() {
            @Override
            public Object reduce(Stack<StackEntry> _grx_stack) {
                Object NAME = _grx_stack.pop().payload;
                Object v;
                {
                 std::vector<std::string> v; v.push_back(NAME); FPS = std::move(v); 
                }
                return v;
            }
        },
        new Reductor() {
            @Override
            public Object reduce(Stack<StackEntry> _grx_stack) {
                Object NAME = _grx_stack.pop().payload;
                _grx_stack.pop();
                Vector_String FPS = (Vector_String)_grx_stack.pop().payload;
                Object v;
                {
                 v = std::move(FPS); v.push_back(NAME); 
                }
                return v;
            }
        },
        new Reductor() {
            @Override
            public Object reduce(Stack<StackEntry> _grx_stack) {
                ExpressionNode E = (ExpressionNode)_grx_stack.pop().payload;
                Object v;
                {
                 v = [E]; 
                }
                return v;
            }
        },
        new Reductor() {
            @Override
            public Object reduce(Stack<StackEntry> _grx_stack) {
                ExpressionNode E = (ExpressionNode)_grx_stack.pop().payload;
                _grx_stack.pop();
                Vector_ExpressionNode APS = (Vector_ExpressionNode)_grx_stack.pop().payload;
                Object v;
                {
                 APS.push_back(E); v = APS;  
                }
                return v;
            }
        },
        new Reductor() {
            @Override
            public Object reduce(Stack<StackEntry> _grx_stack) {
                Object v;
                {
                 v = [SL]; 
                }
                return v;
            }
        },
        new Reductor() {
            @Override
            public Object reduce(Stack<StackEntry> _grx_stack) {
                StatementNode S = (StatementNode)_grx_stack.pop().payload;
                Vector_StatementNode SL = (Vector_StatementNode)_grx_stack.pop().payload;
                Object v;
                {
                 SL.push_back(S); v = std::move(SL); 
                }
                return v;
            }
        },
        new Reductor() {
            @Override
            public Object reduce(Stack<StackEntry> _grx_stack) {
                _grx_stack.pop();
                Vector_StatementNode SL = (Vector_StatementNode)_grx_stack.pop().payload;
                _grx_stack.pop();
                _grx_stack.pop();
                _grx_stack.pop();
                Object v;
                {
                 v = new FunctionDefinitionNode(SL); 
                }
                return v;
            }
        },
        new Reductor() {
            @Override
            public Object reduce(Stack<StackEntry> _grx_stack) {
                _grx_stack.pop();
                Vector_StatementNode SL = (Vector_StatementNode)_grx_stack.pop().payload;
                _grx_stack.pop();
                _grx_stack.pop();
                _grx_stack.pop();
                _grx_stack.pop();
                _grx_stack.pop();
                Object v;
                {
                 v = new FunctionDefinitionNode(SL); 
                }
                return v;
            }
        },
        new Reductor() {
            @Override
            public Object reduce(Stack<StackEntry> _grx_stack) {
                _grx_stack.pop();
                Vector_StatementNode SL = (Vector_StatementNode)_grx_stack.pop().payload;
                _grx_stack.pop();
                _grx_stack.pop();
                Vector_String FP = (Vector_String)_grx_stack.pop().payload;
                _grx_stack.pop();
                _grx_stack.pop();
                _grx_stack.pop();
                Object v;
                {
                 v = new FunctionDefinitionNode(FP, SL); 
                }
                return v;
            }
        },
        new Reductor() {
            @Override
            public Object reduce(Stack<StackEntry> _grx_stack) {
                _grx_stack.pop();
                Vector_StatementNode SL = (Vector_StatementNode)_grx_stack.pop().payload;
                _grx_stack.pop();
                _grx_stack.pop();
                _grx_stack.pop();
                Object v;
                {
                 v = new EventHandlerDefinitionNode(SL); 
                }
                return v;
            }
        },
        new Reductor() {
            @Override
            public Object reduce(Stack<StackEntry> _grx_stack) {
                _grx_stack.pop();
                Vector_StatementNode SL = (Vector_StatementNode)_grx_stack.pop().payload;
                _grx_stack.pop();
                _grx_stack.pop();
                _grx_stack.pop();
                _grx_stack.pop();
                _grx_stack.pop();
                Object v;
                {
                 v = new EventHandlerDefinitionNode(SL); 
                }
                return v;
            }
        },
        new Reductor() {
            @Override
            public Object reduce(Stack<StackEntry> _grx_stack) {
                _grx_stack.pop();
                Vector_StatementNode SL = (Vector_StatementNode)_grx_stack.pop().payload;
                _grx_stack.pop();
                _grx_stack.pop();
                Vector_ExpressionNode AP = (Vector_ExpressionNode)_grx_stack.pop().payload;
                _grx_stack.pop();
                _grx_stack.pop();
                _grx_stack.pop();
                Object v;
                {
                 v = EventHandlerDefinitionNode(AP, SL); 
                }
                return v;
            }
        },
        new Reductor() {
            @Override
            public Object reduce(Stack<StackEntry> _grx_stack) {
                _grx_stack.pop();
                _grx_stack.pop();
                Object FUNCTION_NAME = _grx_stack.pop().payload;
                Object v;
                {
                 v = new FunctionCallStatementNode(FUNCTION_NAME); 
                }
                return v;
            }
        },
        new Reductor() {
            @Override
            public Object reduce(Stack<StackEntry> _grx_stack) {
                _grx_stack.pop();
                Vector_ExpressionNode APS = (Vector_ExpressionNode)_grx_stack.pop().payload;
                _grx_stack.pop();
                Object FUNCTION_NAME = _grx_stack.pop().payload;
                Object v;
                {
                 v = new FunctionCallStatementNode(FUNCTION_NAME, APS); 
                }
                return v;
            }
        },
        new Reductor() {
            @Override
            public Object reduce(Stack<StackEntry> _grx_stack) {
                _grx_stack.pop();
                Object MODE = _grx_stack.pop().payload;
                Object DISPLAY = _grx_stack.pop().payload;
                Object v;
                {
                 v = new PushStatementNode(DISPLAY, MODE); 
                }
                return v;
            }
        },
        new Reductor() {
            @Override
            public Object reduce(Stack<StackEntry> _grx_stack) {
                ExpressionNode CONDITION = (ExpressionNode)_grx_stack.pop().payload;
                _grx_stack.pop();
                _grx_stack.pop();
                Object MODE = _grx_stack.pop().payload;
                Object DISPLAY = _grx_stack.pop().payload;
                Object v;
                {
                 v = new PushStatementNode(DISPLAY, MODE, CONDITION); 
                }
                return v;
            }
        },
        new Reductor() {
            @Override
            public Object reduce(Stack<StackEntry> _grx_stack) {
                Object T = _grx_stack.pop().payload;
                Object v;
                {
                 v = new IdExpressionNode(T.payload.string); 
                }
                return v;
            }
        },
        new Reductor() {
            @Override
            public Object reduce(Stack<StackEntry> _grx_stack) {
                Object T = _grx_stack.pop().payload;
                Object v;
                {
                 v = new IntLiteralExpressionNode(T.payload.TODO); 
                }
                return v;
            }
        },
        new Reductor() {
            @Override
            public Object reduce(Stack<StackEntry> _grx_stack) {
                Object T = _grx_stack.pop().payload;
                Object v;
                {
                 v = new FloatLiteralExpressionNode(T.payload.TODO); 
                }
                return v;
            }
        },
        new Reductor() {
            @Override
            public Object reduce(Stack<StackEntry> _grx_stack) {
                Object T = _grx_stack.pop().payload;
                Object v;
                {
                 v = new StringLiteralExpressionNode(T.payload.TODO); 
                }
                return v;
            }
        },
        new Reductor() {
            @Override
            public Object reduce(Stack<StackEntry> _grx_stack) {
                _grx_stack.pop();
                Object v;
                {
                 v = new BooleanLiteralExpressionNode(true); 
                }
                return v;
            }
        },
        new Reductor() {
            @Override
            public Object reduce(Stack<StackEntry> _grx_stack) {
                _grx_stack.pop();
                Object v;
                {
                 v = new BooleanLiteralExpressionNode(false); 
                }
                return v;
            }
        },
        new Reductor() {
            @Override
            public Object reduce(Stack<StackEntry> _grx_stack) {
                _grx_stack.pop();
                ExpressionNode E_INNER = (ExpressionNode)_grx_stack.pop().payload;
                _grx_stack.pop();
                Object v;
                {
                 v = E_INNER; 
                }
                return v;
            }
        },
        new Reductor() {
            @Override
            public Object reduce(Stack<StackEntry> _grx_stack) {
                ExpressionNode E_INNER = (ExpressionNode)_grx_stack.pop().payload;
                Object v;
                {
                 v = E_INNER; 
                }
                return v;
            }
        },
        new Reductor() {
            @Override
            public Object reduce(Stack<StackEntry> _grx_stack) {
                _grx_stack.pop();
                ExpressionNode INDEX = (ExpressionNode)_grx_stack.pop().payload;
                _grx_stack.pop();
                ExpressionNode BASE = (ExpressionNode)_grx_stack.pop().payload;
                Object v;
                {
                 v = new IndexingExpressionNode(BASE, INDEX); 
                }
                return v;
            }
        },
        new Reductor() {
            @Override
            public Object reduce(Stack<StackEntry> _grx_stack) {
                _grx_stack.pop();
                _grx_stack.pop();
                ExpressionNode BASE = (ExpressionNode)_grx_stack.pop().payload;
                Object v;
                {
                 v = new FunctionCallExpressionNode(BASE); 
                }
                return v;
            }
        },
        new Reductor() {
            @Override
            public Object reduce(Stack<StackEntry> _grx_stack) {
                _grx_stack.pop();
                Vector_ExpressionNode A_PARAMS = (Vector_ExpressionNode)_grx_stack.pop().payload;
                _grx_stack.pop();
                ExpressionNode BASE = (ExpressionNode)_grx_stack.pop().payload;
                Object v;
                {
                 v = new FunctionCallExpressionNode(BASE, A_PARAMS); 
                }
                return v;
            }
        },
        new Reductor() {
            @Override
            public Object reduce(Stack<StackEntry> _grx_stack) {
                Object MEMBER = _grx_stack.pop().payload;
                _grx_stack.pop();
                ExpressionNode BASE = (ExpressionNode)_grx_stack.pop().payload;
                Object v;
                {
                 v = new MemberAccessExpressionNode(BASE, MEMBER); 
                }
                return v;
            }
        },
        new Reductor() {
            @Override
            public Object reduce(Stack<StackEntry> _grx_stack) {
                ExpressionNode E_INNER = (ExpressionNode)_grx_stack.pop().payload;
                Object v;
                {
                 v = E_INNER; 
                }
                return v;
            }
        },
        new Reductor() {
            @Override
            public Object reduce(Stack<StackEntry> _grx_stack) {
                ExpressionNode EXPONENT = (ExpressionNode)_grx_stack.pop().payload;
                _grx_stack.pop();
                ExpressionNode BASE = (ExpressionNode)_grx_stack.pop().payload;
                Object v;
                {
                 v = new PowExpressionNode(BASE, EXPONENT); 
                }
                return v;
            }
        },
        new Reductor() {
            @Override
            public Object reduce(Stack<StackEntry> _grx_stack) {
                ExpressionNode E_INNER = (ExpressionNode)_grx_stack.pop().payload;
                Object v;
                {
                 v = E_INNER; 
                }
                return v;
            }
        },
        new Reductor() {
            @Override
            public Object reduce(Stack<StackEntry> _grx_stack) {
                ExpressionNode BASE = (ExpressionNode)_grx_stack.pop().payload;
                _grx_stack.pop();
                Object v;
                {
                 v = new UnaryExpressionNode(UnaryExpressionType::NEGATION, BASE); 
                }
                return v;
            }
        },
        new Reductor() {
            @Override
            public Object reduce(Stack<StackEntry> _grx_stack) {
                ExpressionNode BASE = (ExpressionNode)_grx_stack.pop().payload;
                _grx_stack.pop();
                Object v;
                {
                 v = new UnaryExpressionNode(UnaryExpressionType::BITWISE_INVERT, BASE); 
                }
                return v;
            }
        },
        new Reductor() {
            @Override
            public Object reduce(Stack<StackEntry> _grx_stack) {
                ExpressionNode BASE = (ExpressionNode)_grx_stack.pop().payload;
                _grx_stack.pop();
                Object v;
                {
                 v = new UnaryExpressionNode(UnaryExpressionType::INVERT, BASE); 
                }
                return v;
            }
        },
        new Reductor() {
            @Override
            public Object reduce(Stack<StackEntry> _grx_stack) {
                ExpressionNode E_INNER = (ExpressionNode)_grx_stack.pop().payload;
                Object v;
                {
                 v = E_INNER; 
                }
                return v;
            }
        },
        new Reductor() {
            @Override
            public Object reduce(Stack<StackEntry> _grx_stack) {
                ExpressionNode R = (ExpressionNode)_grx_stack.pop().payload;
                _grx_stack.pop();
                ExpressionNode L = (ExpressionNode)_grx_stack.pop().payload;
                Object v;
                {
                 v = new BinaryExpressionNode(BinaryExpressionType::MULTIPLICATION, L, R); 
                }
                return v;
            }
        },
        new Reductor() {
            @Override
            public Object reduce(Stack<StackEntry> _grx_stack) {
                ExpressionNode R = (ExpressionNode)_grx_stack.pop().payload;
                _grx_stack.pop();
                ExpressionNode L = (ExpressionNode)_grx_stack.pop().payload;
                Object v;
                {
                 v = new BinaryExpressionNode(BinaryExpressionType::DIVISION, L, R); 
                }
                return v;
            }
        },
        new Reductor() {
            @Override
            public Object reduce(Stack<StackEntry> _grx_stack) {
                ExpressionNode R = (ExpressionNode)_grx_stack.pop().payload;
                _grx_stack.pop();
                ExpressionNode L = (ExpressionNode)_grx_stack.pop().payload;
                Object v;
                {
                 v = new BinaryExpressionNode(BinaryExpressionType::REMAINDER, L, R); 
                }
                return v;
            }
        },
        new Reductor() {
            @Override
            public Object reduce(Stack<StackEntry> _grx_stack) {
                ExpressionNode E_INNER = (ExpressionNode)_grx_stack.pop().payload;
                Object v;
                {
                 v = E_INNER; 
                }
                return v;
            }
        },
        new Reductor() {
            @Override
            public Object reduce(Stack<StackEntry> _grx_stack) {
                ExpressionNode R = (ExpressionNode)_grx_stack.pop().payload;
                _grx_stack.pop();
                ExpressionNode L = (ExpressionNode)_grx_stack.pop().payload;
                Object v;
                {
                 v = new BinaryExpressionNode(BinaryExpressionType::ADDITION, L, R); 
                }
                return v;
            }
        },
        new Reductor() {
            @Override
            public Object reduce(Stack<StackEntry> _grx_stack) {
                ExpressionNode R = (ExpressionNode)_grx_stack.pop().payload;
                _grx_stack.pop();
                ExpressionNode L = (ExpressionNode)_grx_stack.pop().payload;
                Object v;
                {
                 v = new BinaryExpressionNode(BinaryExpressionType::SUBTRACTION, L, R); 
                }
                return v;
            }
        },
        new Reductor() {
            @Override
            public Object reduce(Stack<StackEntry> _grx_stack) {
                ExpressionNode E_INNER = (ExpressionNode)_grx_stack.pop().payload;
                Object v;
                {
                 v = E_INNER; 
                }
                return v;
            }
        },
        new Reductor() {
            @Override
            public Object reduce(Stack<StackEntry> _grx_stack) {
                ExpressionNode R = (ExpressionNode)_grx_stack.pop().payload;
                _grx_stack.pop();
                ExpressionNode L = (ExpressionNode)_grx_stack.pop().payload;
                Object v;
                {
                 v = new BinaryExpressionNode(BinaryExpressionType::BITWISE_SHIFT_LEFT, L, R); 
                }
                return v;
            }
        },
        new Reductor() {
            @Override
            public Object reduce(Stack<StackEntry> _grx_stack) {
                ExpressionNode R = (ExpressionNode)_grx_stack.pop().payload;
                _grx_stack.pop();
                ExpressionNode L = (ExpressionNode)_grx_stack.pop().payload;
                Object v;
                {
                 v = new BinaryExpressionNode(BinaryExpressionType::BITWISE_SHIFT_RIGHT, L, R); 
                }
                return v;
            }
        },
        new Reductor() {
            @Override
            public Object reduce(Stack<StackEntry> _grx_stack) {
                ExpressionNode E_INNER = (ExpressionNode)_grx_stack.pop().payload;
                Object v;
                {
                 v = E_INNER; 
                }
                return v;
            }
        },
        new Reductor() {
            @Override
            public Object reduce(Stack<StackEntry> _grx_stack) {
                ExpressionNode R = (ExpressionNode)_grx_stack.pop().payload;
                _grx_stack.pop();
                ExpressionNode L = (ExpressionNode)_grx_stack.pop().payload;
                Object v;
                {
                 v = new BinaryExpressionNode(BinaryExpressionType::LESS_THAN, L, R); 
                }
                return v;
            }
        },
        new Reductor() {
            @Override
            public Object reduce(Stack<StackEntry> _grx_stack) {
                ExpressionNode R = (ExpressionNode)_grx_stack.pop().payload;
                _grx_stack.pop();
                ExpressionNode L = (ExpressionNode)_grx_stack.pop().payload;
                Object v;
                {
                 v = new BinaryExpressionNode(BinaryExpressionType::GREATER_THAN, L, R); 
                }
                return v;
            }
        },
        new Reductor() {
            @Override
            public Object reduce(Stack<StackEntry> _grx_stack) {
                ExpressionNode R = (ExpressionNode)_grx_stack.pop().payload;
                _grx_stack.pop();
                ExpressionNode L = (ExpressionNode)_grx_stack.pop().payload;
                Object v;
                {
                 v = new BinaryExpressionNode(BinaryExpressionType::LESS_THAN_OR_EQUAL, L, R); 
                }
                return v;
            }
        },
        new Reductor() {
            @Override
            public Object reduce(Stack<StackEntry> _grx_stack) {
                ExpressionNode R = (ExpressionNode)_grx_stack.pop().payload;
                _grx_stack.pop();
                ExpressionNode L = (ExpressionNode)_grx_stack.pop().payload;
                Object v;
                {
                 v = new BinaryExpressionNode(BinaryExpressionType::GREATER_THAN_OR_EQUAL, L, R); 
                }
                return v;
            }
        },
        new Reductor() {
            @Override
            public Object reduce(Stack<StackEntry> _grx_stack) {
                ExpressionNode E_INNER = (ExpressionNode)_grx_stack.pop().payload;
                Object v;
                {
                 v = E_INNER; 
                }
                return v;
            }
        },
        new Reductor() {
            @Override
            public Object reduce(Stack<StackEntry> _grx_stack) {
                ExpressionNode R = (ExpressionNode)_grx_stack.pop().payload;
                _grx_stack.pop();
                ExpressionNode L = (ExpressionNode)_grx_stack.pop().payload;
                Object v;
                {
                 v = new BinaryExpressionNode(BinaryExpressionType::EQUAL, L, R); 
                }
                return v;
            }
        },
        new Reductor() {
            @Override
            public Object reduce(Stack<StackEntry> _grx_stack) {
                ExpressionNode R = (ExpressionNode)_grx_stack.pop().payload;
                _grx_stack.pop();
                ExpressionNode L = (ExpressionNode)_grx_stack.pop().payload;
                Object v;
                {
                 v = new BinaryExpressionNode(BinaryExpressionType::NOT_EQUAL, L, R); 
                }
                return v;
            }
        },
        new Reductor() {
            @Override
            public Object reduce(Stack<StackEntry> _grx_stack) {
                ExpressionNode E_INNER = (ExpressionNode)_grx_stack.pop().payload;
                Object v;
                {
                 v = E_INNER; 
                }
                return v;
            }
        },
        new Reductor() {
            @Override
            public Object reduce(Stack<StackEntry> _grx_stack) {
                ExpressionNode R = (ExpressionNode)_grx_stack.pop().payload;
                _grx_stack.pop();
                ExpressionNode L = (ExpressionNode)_grx_stack.pop().payload;
                Object v;
                {
                 v = new BinaryExpressionNode(BinaryExpressionType::BITWISE_AND, L, R); 
                }
                return v;
            }
        },
        new Reductor() {
            @Override
            public Object reduce(Stack<StackEntry> _grx_stack) {
                ExpressionNode E_INNER = (ExpressionNode)_grx_stack.pop().payload;
                Object v;
                {
                 v = E_INNER; 
                }
                return v;
            }
        },
        new Reductor() {
            @Override
            public Object reduce(Stack<StackEntry> _grx_stack) {
                ExpressionNode R = (ExpressionNode)_grx_stack.pop().payload;
                _grx_stack.pop();
                ExpressionNode L = (ExpressionNode)_grx_stack.pop().payload;
                Object v;
                {
                 v = new BinaryExpressionNode(BinaryExpressionType::BITWISE_XOR, L, R); 
                }
                return v;
            }
        },
        new Reductor() {
            @Override
            public Object reduce(Stack<StackEntry> _grx_stack) {
                ExpressionNode E_INNER = (ExpressionNode)_grx_stack.pop().payload;
                Object v;
                {
                 v = E_INNER; 
                }
                return v;
            }
        },
        new Reductor() {
            @Override
            public Object reduce(Stack<StackEntry> _grx_stack) {
                ExpressionNode R = (ExpressionNode)_grx_stack.pop().payload;
                _grx_stack.pop();
                ExpressionNode L = (ExpressionNode)_grx_stack.pop().payload;
                Object v;
                {
                 v = new BinaryExpressionNode(BinaryExpressionType::BITWISE_OR, L, R); 
                }
                return v;
            }
        },
        new Reductor() {
            @Override
            public Object reduce(Stack<StackEntry> _grx_stack) {
                ExpressionNode E_INNER = (ExpressionNode)_grx_stack.pop().payload;
                Object v;
                {
                 v = E_INNER; 
                }
                return v;
            }
        },
        new Reductor() {
            @Override
            public Object reduce(Stack<StackEntry> _grx_stack) {
                ExpressionNode R = (ExpressionNode)_grx_stack.pop().payload;
                _grx_stack.pop();
                ExpressionNode L = (ExpressionNode)_grx_stack.pop().payload;
                Object v;
                {
                 v = new BinaryExpressionNode(BinaryExpressionType::AND, L, R); 
                }
                return v;
            }
        },
        new Reductor() {
            @Override
            public Object reduce(Stack<StackEntry> _grx_stack) {
                ExpressionNode E_INNER = (ExpressionNode)_grx_stack.pop().payload;
                Object v;
                {
                 v = E_INNER; 
                }
                return v;
            }
        },
        new Reductor() {
            @Override
            public Object reduce(Stack<StackEntry> _grx_stack) {
                ExpressionNode R = (ExpressionNode)_grx_stack.pop().payload;
                _grx_stack.pop();
                ExpressionNode L = (ExpressionNode)_grx_stack.pop().payload;
                Object v;
                {
                 v = new BinaryExpressionNode(BinaryExpressionType::OR, L, R); 
                }
                return v;
            }
        },
        new Reductor() {
            @Override
            public Object reduce(Stack<StackEntry> _grx_stack) {
                ExpressionNode E_INNER = (ExpressionNode)_grx_stack.pop().payload;
                Object v;
                {
                 v = E_INNER; 
                }
                return v;
            }
        },
        new Reductor() {
            @Override
            public Object reduce(Stack<StackEntry> _grx_stack) {
                ExpressionNode ELSE = (ExpressionNode)_grx_stack.pop().payload;
                _grx_stack.pop();
                ExpressionNode IF = (ExpressionNode)_grx_stack.pop().payload;
                _grx_stack.pop();
                ExpressionNode COND = (ExpressionNode)_grx_stack.pop().payload;
                Object v;
                {
                 v = new TernaryExpressionNode(COND, IF, ELSE); 
                }
                return v;
            }
        },
        new Reductor() {
            @Override
            public Object reduce(Stack<StackEntry> _grx_stack) {
                ExpressionNode E_INNER = (ExpressionNode)_grx_stack.pop().payload;
                Object v;
                {
                 v = E_INNER; 
                }
                return v;
            }
        },
        new Reductor() {
            @Override
            public Object reduce(Stack<StackEntry> _grx_stack) {
                ExpressionNode R = (ExpressionNode)_grx_stack.pop().payload;
                _grx_stack.pop();
                ExpressionNode L = (ExpressionNode)_grx_stack.pop().payload;
                Object v;
                {
                 v = new BinaryExpressionNode(BinaryExpressionType::ASSIGN, L, R); 
                }
                return v;
            }
        },
        new Reductor() {
            @Override
            public Object reduce(Stack<StackEntry> _grx_stack) {
                ExpressionNode R = (ExpressionNode)_grx_stack.pop().payload;
                _grx_stack.pop();
                ExpressionNode L = (ExpressionNode)_grx_stack.pop().payload;
                Object v;
                {
                 v = new BinaryExpressionNode(BinaryExpressionType::ASSIGN_MULTIPLY, L, R); 
                }
                return v;
            }
        },
        new Reductor() {
            @Override
            public Object reduce(Stack<StackEntry> _grx_stack) {
                ExpressionNode R = (ExpressionNode)_grx_stack.pop().payload;
                _grx_stack.pop();
                ExpressionNode L = (ExpressionNode)_grx_stack.pop().payload;
                Object v;
                {
                 v = new BinaryExpressionNode(BinaryExpressionType::ASSIGN_DIVIDE, L, R); 
                }
                return v;
            }
        },
        new Reductor() {
            @Override
            public Object reduce(Stack<StackEntry> _grx_stack) {
                ExpressionNode R = (ExpressionNode)_grx_stack.pop().payload;
                _grx_stack.pop();
                ExpressionNode L = (ExpressionNode)_grx_stack.pop().payload;
                Object v;
                {
                 v = new BinaryExpressionNode(BinaryExpressionType::ASSIGN_REMAINDER, L, R); 
                }
                return v;
            }
        },
        new Reductor() {
            @Override
            public Object reduce(Stack<StackEntry> _grx_stack) {
                ExpressionNode R = (ExpressionNode)_grx_stack.pop().payload;
                _grx_stack.pop();
                ExpressionNode L = (ExpressionNode)_grx_stack.pop().payload;
                Object v;
                {
                 v = new BinaryExpressionNode(BinaryExpressionType::ASSIGN_PLUS, L, R); 
                }
                return v;
            }
        },
        new Reductor() {
            @Override
            public Object reduce(Stack<StackEntry> _grx_stack) {
                ExpressionNode R = (ExpressionNode)_grx_stack.pop().payload;
                _grx_stack.pop();
                ExpressionNode L = (ExpressionNode)_grx_stack.pop().payload;
                Object v;
                {
                 v = new BinaryExpressionNode(BinaryExpressionType::ASSIGN_MINUS, L, R); 
                }
                return v;
            }
        },
        new Reductor() {
            @Override
            public Object reduce(Stack<StackEntry> _grx_stack) {
                ExpressionNode R = (ExpressionNode)_grx_stack.pop().payload;
                _grx_stack.pop();
                ExpressionNode L = (ExpressionNode)_grx_stack.pop().payload;
                Object v;
                {
                 v = new BinaryExpressionNode(BinaryExpressionType::ASSIGN_BITWISE_SHIFT_LEFT, L, R); 
                }
                return v;
            }
        },
        new Reductor() {
            @Override
            public Object reduce(Stack<StackEntry> _grx_stack) {
                ExpressionNode R = (ExpressionNode)_grx_stack.pop().payload;
                _grx_stack.pop();
                ExpressionNode L = (ExpressionNode)_grx_stack.pop().payload;
                Object v;
                {
                 v = new BinaryExpressionNode(BinaryExpressionType::ASSIGN_BITWISE_SHIFT_RIGHT, L, R); 
                }
                return v;
            }
        },
        new Reductor() {
            @Override
            public Object reduce(Stack<StackEntry> _grx_stack) {
                ExpressionNode R = (ExpressionNode)_grx_stack.pop().payload;
                _grx_stack.pop();
                ExpressionNode L = (ExpressionNode)_grx_stack.pop().payload;
                Object v;
                {
                 v = new BinaryExpressionNode(BinaryExpressionType::ASSIGN_BITWISE_AND, L, R); 
                }
                return v;
            }
        },
        new Reductor() {
            @Override
            public Object reduce(Stack<StackEntry> _grx_stack) {
                ExpressionNode R = (ExpressionNode)_grx_stack.pop().payload;
                _grx_stack.pop();
                ExpressionNode L = (ExpressionNode)_grx_stack.pop().payload;
                Object v;
                {
                 v = new BinaryExpressionNode(BinaryExpressionType::ASSIGN_BITWISE_XOR, L, R); 
                }
                return v;
            }
        },
        new Reductor() {
            @Override
            public Object reduce(Stack<StackEntry> _grx_stack) {
                ExpressionNode R = (ExpressionNode)_grx_stack.pop().payload;
                _grx_stack.pop();
                ExpressionNode L = (ExpressionNode)_grx_stack.pop().payload;
                Object v;
                {
                 v = new BinaryExpressionNode(BinaryExpressionType::ASSIGN_BITWISE_OR, L, R); 
                }
                return v;
            }
        }
    };
    private static final StackEntry initialStackEntry = new StackEntry(0, null);
    private Stack<StackEntry> stack;
    private Object payload = null;
    private static final class StackEntry {
        private final int previousState;
        private final Object payload;
        private StackEntry(int previousState, Object payload) {
            this.previousState = previousState;
            this.payload = payload;
        }
    }
    private interface Reductor {
        Object reduce(Stack<StackEntry> _grx_stack);
    }
    public ZeroLampParser() {
        stack = new Stack<>();
        stack.push(initialStackEntry);
    }
    public void reset() {
        stack.clear();
        stack.push(initialStackEntry);
        payload = null;
    }
    public void parse(int tokenId, Object tokenPayload) {
        while (true) {
            int action = actionTable[terminalCount * stack.peek().previousState + tokenId];
            if (action == 0) {
                throw new RuntimeException("Syntax error");
            }
            if (action == -1) {
                payload = stack.peek().payload;
                return;
            }
            if (action > 0) {
                stack.push(new StackEntry(action - 1, tokenPayload));
                return;
            }
            int productionIndex = -action - 2;
            Object reducedProduction = reductions[productionIndex].reduce(stack);
            StackEntry newState = stack.peek();
            int nextState = gotoTable[newState.previousState * nonTerminalCount + productionLabels[productionIndex]];
            stack.push(new StackEntry(nextState - 1, reducedProduction));
        }
    }
    public boolean successfullyParsed() {
        return payload != null;
    }
    public Object getValue() {
        assert payload != null : "parsing did not succeed";
        return payload;
    }
}